
COMP_STRUCT_EXAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006728  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080068b8  080068b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006948  08006948  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006950  08006950  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000068  080069c0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080069c0  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011709  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002558  00000000  00000000  000317e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00033d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c89  00000000  00000000  00034d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002791f  00000000  00000000  000359e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c39  00000000  00000000  0005d300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f43df  00000000  00000000  0006ff39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004af0  00000000  00000000  00164318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00168e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068a0 	.word	0x080068a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080068a0 	.word	0x080068a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file,char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	while (tx_busy != 0)
 8000578:	bf00      	nop
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <_write+0x34>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1fb      	bne.n	800057a <_write+0xe>
	{
		/*wait*/
	}
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)ptr, len);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	b29b      	uxth	r3, r3
 8000586:	461a      	mov	r2, r3
 8000588:	68b9      	ldr	r1, [r7, #8]
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <_write+0x38>)
 800058c:	f003 fe64 	bl	8004258 <HAL_UART_Transmit_IT>
	tx_busy = 1;
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <_write+0x34>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
	return len;
 8000596:	687b      	ldr	r3, [r7, #4]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200001e8 	.word	0x200001e8
 80005a4:	200000d0 	.word	0x200000d0

080005a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	printf("Received: [%s]\r\n", rx_buffer);
 80005b0:	4906      	ldr	r1, [pc, #24]	; (80005cc <HAL_UART_RxCpltCallback+0x24>)
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <HAL_UART_RxCpltCallback+0x28>)
 80005b4:	f005 fb00 	bl	8005bb8 <iprintf>

	HAL_UART_Receive_IT(&huart2, rx_buffer, 4);//restart the interrupt reception mode
 80005b8:	2204      	movs	r2, #4
 80005ba:	4904      	ldr	r1, [pc, #16]	; (80005cc <HAL_UART_RxCpltCallback+0x24>)
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <HAL_UART_RxCpltCallback+0x2c>)
 80005be:	f003 fea9 	bl	8004314 <HAL_UART_Receive_IT>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200001ec 	.word	0x200001ec
 80005d0:	080068b8 	.word	0x080068b8
 80005d4:	200000d0 	.word	0x200000d0

080005d8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	tx_busy = 0;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <HAL_UART_TxCpltCallback+0x1c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200001e8 	.word	0x200001e8

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fc20 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f828 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f97c 	bl	8000900 <MX_GPIO_Init>
  MX_DMA_Init();
 8000608:	f000 f954 	bl	80008b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800060c:	f000 f922 	bl	8000854 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000610:	f000 f872 	bl	80006f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//Initialize the PWM in the channel 1
 8000614:	2100      	movs	r1, #0
 8000616:	480c      	ldr	r0, [pc, #48]	; (8000648 <main+0x50>)
 8000618:	f002 fd2c 	bl	8003074 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, rx_buffer, 4);//initialize the UART Reception as interruption mode
 800061c:	2204      	movs	r2, #4
 800061e:	490b      	ldr	r1, [pc, #44]	; (800064c <main+0x54>)
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <main+0x58>)
 8000622:	f003 fe77 	bl	8004314 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, rx_buffer, 4, 1000);//print the value that the UART has received every second
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	2204      	movs	r2, #4
 800062c:	4907      	ldr	r1, [pc, #28]	; (800064c <main+0x54>)
 800062e:	4808      	ldr	r0, [pc, #32]	; (8000650 <main+0x58>)
 8000630:	f003 fd88 	bl	8004144 <HAL_UART_Transmit>
	  htim1.Instance->CCR1=rx_buffer;  //Here the PWM sets the duty cycle that was received.
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <main+0x50>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <main+0x54>)
 800063a:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);	  	  	  	  	  	  	  // Time to wait between cycles.
 800063c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000640:	f000 fc7a 	bl	8000f38 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, rx_buffer, 4, 1000);//print the value that the UART has received every second
 8000644:	e7ef      	b.n	8000626 <main+0x2e>
 8000646:	bf00      	nop
 8000648:	20000084 	.word	0x20000084
 800064c:	200001ec 	.word	0x200001ec
 8000650:	200000d0 	.word	0x200000d0

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2244      	movs	r2, #68	; 0x44
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fafd 	bl	8005c62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067a:	f001 f931 	bl	80018e0 <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000684:	f000 f98e 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2310      	movs	r3, #16
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006a2:	230a      	movs	r3, #10
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f968 	bl	800198c <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006c2:	f000 f96f 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	2104      	movs	r1, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fd30 	bl	8002144 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 f95b 	bl	80009a4 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3758      	adds	r7, #88	; 0x58
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b09a      	sub	sp, #104	; 0x68
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000718:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	222c      	movs	r2, #44	; 0x2c
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f005 fa95 	bl	8005c62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000738:	4b44      	ldr	r3, [pc, #272]	; (800084c <MX_TIM1_Init+0x154>)
 800073a:	4a45      	ldr	r2, [pc, #276]	; (8000850 <MX_TIM1_Init+0x158>)
 800073c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800073e:	4b43      	ldr	r3, [pc, #268]	; (800084c <MX_TIM1_Init+0x154>)
 8000740:	224f      	movs	r2, #79	; 0x4f
 8000742:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b41      	ldr	r3, [pc, #260]	; (800084c <MX_TIM1_Init+0x154>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800074a:	4b40      	ldr	r3, [pc, #256]	; (800084c <MX_TIM1_Init+0x154>)
 800074c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000750:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_TIM1_Init+0x154>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000758:	4b3c      	ldr	r3, [pc, #240]	; (800084c <MX_TIM1_Init+0x154>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b3b      	ldr	r3, [pc, #236]	; (800084c <MX_TIM1_Init+0x154>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000764:	4839      	ldr	r0, [pc, #228]	; (800084c <MX_TIM1_Init+0x154>)
 8000766:	f002 fbcd 	bl	8002f04 <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000770:	f000 f918 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800077a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077e:	4619      	mov	r1, r3
 8000780:	4832      	ldr	r0, [pc, #200]	; (800084c <MX_TIM1_Init+0x154>)
 8000782:	f002 fe91 	bl	80034a8 <HAL_TIM_ConfigClockSource>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800078c:	f000 f90a 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000790:	482e      	ldr	r0, [pc, #184]	; (800084c <MX_TIM1_Init+0x154>)
 8000792:	f002 fc0e 	bl	8002fb2 <HAL_TIM_PWM_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800079c:	f000 f902 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007b0:	4619      	mov	r1, r3
 80007b2:	4826      	ldr	r0, [pc, #152]	; (800084c <MX_TIM1_Init+0x154>)
 80007b4:	f003 fb72 	bl	8003e9c <HAL_TIMEx_MasterConfigSynchronization>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007be:	f000 f8f1 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c2:	2360      	movs	r3, #96	; 0x60
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 80007c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007d8:	2300      	movs	r3, #0
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007e4:	2200      	movs	r2, #0
 80007e6:	4619      	mov	r1, r3
 80007e8:	4818      	ldr	r0, [pc, #96]	; (800084c <MX_TIM1_Init+0x154>)
 80007ea:	f002 fd49 	bl	8003280 <HAL_TIM_PWM_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80007f4:	f000 f8d6 	bl	80009a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000810:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800081a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM1_Init+0x154>)
 800082e:	f003 fbbd 	bl	8003fac <HAL_TIMEx_ConfigBreakDeadTime>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000838:	f000 f8b4 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM1_Init+0x154>)
 800083e:	f000 f8fb 	bl	8000a38 <HAL_TIM_MspPostInit>

}
 8000842:	bf00      	nop
 8000844:	3768      	adds	r7, #104	; 0x68
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000084 	.word	0x20000084
 8000850:	40012c00 	.word	0x40012c00

08000854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USART2_UART_Init+0x58>)
 800085a:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <MX_USART2_UART_Init+0x5c>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_USART2_UART_Init+0x58>)
 8000860:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART2_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USART2_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART2_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART2_UART_Init+0x58>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART2_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART2_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART2_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART2_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART2_UART_Init+0x58>)
 8000898:	f003 fc06 	bl	80040a8 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f87f 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000d0 	.word	0x200000d0
 80008b0:	40004400 	.word	0x40004400

080008b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_DMA_Init+0x48>)
 80008bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <MX_DMA_Init+0x48>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6493      	str	r3, [r2, #72]	; 0x48
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_DMA_Init+0x48>)
 80008c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2010      	movs	r0, #16
 80008d8:	f000 fc2d 	bl	8001136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008dc:	2010      	movs	r0, #16
 80008de:	f000 fc46 	bl	800116e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2011      	movs	r0, #17
 80008e8:	f000 fc25 	bl	8001136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80008ec:	2011      	movs	r0, #17
 80008ee:	f000 fc3e 	bl	800116e <HAL_NVIC_EnableIRQ>

}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_GPIO_Init+0x9c>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a20      	ldr	r2, [pc, #128]	; (800099c <MX_GPIO_Init+0x9c>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_GPIO_Init+0x9c>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_GPIO_Init+0x9c>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a1a      	ldr	r2, [pc, #104]	; (800099c <MX_GPIO_Init+0x9c>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_GPIO_Init+0x9c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_GPIO_Init+0x9c>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4a14      	ldr	r2, [pc, #80]	; (800099c <MX_GPIO_Init+0x9c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_GPIO_Init+0x9c>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_GPIO_Init+0x9c>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <MX_GPIO_Init+0x9c>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_GPIO_Init+0x9c>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800097c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_GPIO_Init+0xa0>)
 800098e:	f000 fdef 	bl	8001570 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000800 	.word	0x48000800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_MspInit+0x44>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6613      	str	r3, [r2, #96]	; 0x60
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x44>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6593      	str	r3, [r2, #88]	; 0x58
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x44>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_TIM_Base_MspInit+0x38>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10b      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_TIM_Base_MspInit+0x3c>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <HAL_TIM_Base_MspInit+0x3c>)
 8000a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a14:	6613      	str	r3, [r2, #96]	; 0x60
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <HAL_TIM_Base_MspInit+0x3c>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40012c00 	.word	0x40012c00
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <HAL_TIM_MspPostInit+0x68>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d11d      	bne.n	8000a96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_TIM_MspPostInit+0x6c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <HAL_TIM_MspPostInit+0x6c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_TIM_MspPostInit+0x6c>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f000 fd6d 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40012c00 	.word	0x40012c00
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b0ac      	sub	sp, #176	; 0xb0
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2288      	movs	r2, #136	; 0x88
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f005 f8ca 	bl	8005c62 <memset>
  if(huart->Instance==USART2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a4f      	ldr	r2, [pc, #316]	; (8000c10 <HAL_UART_MspInit+0x168>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	f040 8096 	bne.w	8000c06 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fd50 	bl	800258c <HAL_RCCEx_PeriphCLKConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000af2:	f7ff ff57 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af6:	4b47      	ldr	r3, [pc, #284]	; (8000c14 <HAL_UART_MspInit+0x16c>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a46      	ldr	r2, [pc, #280]	; (8000c14 <HAL_UART_MspInit+0x16c>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <HAL_UART_MspInit+0x16c>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b41      	ldr	r3, [pc, #260]	; (8000c14 <HAL_UART_MspInit+0x16c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	4a40      	ldr	r2, [pc, #256]	; (8000c14 <HAL_UART_MspInit+0x16c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1a:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <HAL_UART_MspInit+0x16c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b26:	230c      	movs	r3, #12
 8000b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 fd0f 	bl	8001570 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000b52:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000b54:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <HAL_UART_MspInit+0x174>)
 8000b56:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b64:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b6a:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b70:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000b7c:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b88:	4823      	ldr	r0, [pc, #140]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000b8a:	f000 fb0b 	bl	80011a4 <HAL_DMA_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000b94:	f7ff ff06 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000b9c:	675a      	str	r2, [r3, #116]	; 0x74
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <HAL_UART_MspInit+0x170>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <HAL_UART_MspInit+0x17c>)
 8000ba8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000bac:	2202      	movs	r2, #2
 8000bae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000bb2:	2210      	movs	r2, #16
 8000bb4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000bda:	4811      	ldr	r0, [pc, #68]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000bdc:	f000 fae2 	bl	80011a4 <HAL_DMA_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8000be6:	f7ff fedd 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000bee:	671a      	str	r2, [r3, #112]	; 0x70
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <HAL_UART_MspInit+0x178>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2026      	movs	r0, #38	; 0x26
 8000bfc:	f000 fa9b 	bl	8001136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c00:	2026      	movs	r0, #38	; 0x26
 8000c02:	f000 fab4 	bl	800116e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	37b0      	adds	r7, #176	; 0xb0
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40004400 	.word	0x40004400
 8000c14:	40021000 	.word	0x40021000
 8000c18:	20000158 	.word	0x20000158
 8000c1c:	4002006c 	.word	0x4002006c
 8000c20:	200001a0 	.word	0x200001a0
 8000c24:	40020080 	.word	0x40020080

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f940 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <DMA1_Channel6_IRQHandler+0x10>)
 8000c82:	f000 fbc6 	bl	8001412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000158 	.word	0x20000158

08000c90 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <DMA1_Channel7_IRQHandler+0x10>)
 8000c96:	f000 fbbc 	bl	8001412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200001a0 	.word	0x200001a0

08000ca4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <USART2_IRQHandler+0x10>)
 8000caa:	f003 fb7f 	bl	80043ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000d0 	.word	0x200000d0

08000cb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	e00a      	b.n	8000ce0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cca:	f3af 8000 	nop.w
 8000cce:	4601      	mov	r1, r0
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	b2ca      	uxtb	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbf0      	blt.n	8000cca <_read+0x12>
  }

  return len;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_isatty>:

int _isatty(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f004 ffb8 	bl	8005d00 <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20018000 	.word	0x20018000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	200001f0 	.word	0x200001f0
 8000dc4:	20000348 	.word	0x20000348

08000dc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df0:	f7ff ffea 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	; (8000e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f004 ff77 	bl	8005d0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1e:	f7ff fbeb 	bl	80005f8 <main>

08000e22 <LoopForever>:

LoopForever:
    b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e30:	08006958 	.word	0x08006958
  ldr r2, =_sbss
 8000e34:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e38:	20000344 	.word	0x20000344

08000e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_2_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_Init+0x3c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_Init+0x3c>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f000 f962 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 f80f 	bl	8000e80 <HAL_InitTick>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	e001      	b.n	8000e72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6e:	f7ff fd9f 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e72:	79fb      	ldrb	r3, [r7, #7]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40022000 	.word	0x40022000

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_InitTick+0x6c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d023      	beq.n	8000edc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_InitTick+0x70>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_InitTick+0x6c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f96d 	bl	800118a <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10f      	bne.n	8000ed6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d809      	bhi.n	8000ed0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f937 	bl	8001136 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_InitTick+0x74>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e007      	b.n	8000ee0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e004      	b.n	8000ee0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	e001      	b.n	8000ee0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	200001f4 	.word	0x200001f4

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	200001f4 	.word	0x200001f4

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ec:	d301      	bcc.n	80010f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00f      	b.n	8001112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <SysTick_Config+0x40>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fa:	210f      	movs	r1, #15
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f7ff ff8e 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x40>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x40>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff29 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff3e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff8e 	bl	8001074 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff31 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa2 	bl	80010dc <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e098      	b.n	80012e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <HAL_DMA_Init+0x150>)
 80011be:	429a      	cmp	r2, r3
 80011c0:	d80f      	bhi.n	80011e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <HAL_DMA_Init+0x154>)
 80011ca:	4413      	add	r3, r2
 80011cc:	4a4b      	ldr	r2, [pc, #300]	; (80012fc <HAL_DMA_Init+0x158>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	009a      	lsls	r2, r3, #2
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a48      	ldr	r2, [pc, #288]	; (8001300 <HAL_DMA_Init+0x15c>)
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
 80011e0:	e00e      	b.n	8001200 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b46      	ldr	r3, [pc, #280]	; (8001304 <HAL_DMA_Init+0x160>)
 80011ea:	4413      	add	r3, r2
 80011ec:	4a43      	ldr	r2, [pc, #268]	; (80012fc <HAL_DMA_Init+0x158>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	009a      	lsls	r2, r3, #2
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a42      	ldr	r2, [pc, #264]	; (8001308 <HAL_DMA_Init+0x164>)
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2202      	movs	r2, #2
 8001204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800121a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800125a:	d039      	beq.n	80012d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <HAL_DMA_Init+0x15c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d11a      	bne.n	800129c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <HAL_DMA_Init+0x168>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f003 031c 	and.w	r3, r3, #28
 8001272:	210f      	movs	r1, #15
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	4924      	ldr	r1, [pc, #144]	; (800130c <HAL_DMA_Init+0x168>)
 800127c:	4013      	ands	r3, r2
 800127e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_DMA_Init+0x168>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	f003 031c 	and.w	r3, r3, #28
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	491d      	ldr	r1, [pc, #116]	; (800130c <HAL_DMA_Init+0x168>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
 800129a:	e019      	b.n	80012d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_DMA_Init+0x16c>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f003 031c 	and.w	r3, r3, #28
 80012a8:	210f      	movs	r1, #15
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	4917      	ldr	r1, [pc, #92]	; (8001310 <HAL_DMA_Init+0x16c>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_DMA_Init+0x16c>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6859      	ldr	r1, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f003 031c 	and.w	r3, r3, #28
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	4911      	ldr	r1, [pc, #68]	; (8001310 <HAL_DMA_Init+0x16c>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40020407 	.word	0x40020407
 80012f8:	bffdfff8 	.word	0xbffdfff8
 80012fc:	cccccccd 	.word	0xcccccccd
 8001300:	40020000 	.word	0x40020000
 8001304:	bffdfbf8 	.word	0xbffdfbf8
 8001308:	40020400 	.word	0x40020400
 800130c:	400200a8 	.word	0x400200a8
 8001310:	400204a8 	.word	0x400204a8

08001314 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d008      	beq.n	800133e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2204      	movs	r2, #4
 8001330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e022      	b.n	8001384 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 020e 	bic.w	r2, r2, #14
 800134c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f003 021c 	and.w	r2, r3, #28
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	2101      	movs	r1, #1
 800136c:	fa01 f202 	lsl.w	r2, r1, r2
 8001370:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d005      	beq.n	80013b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2204      	movs	r2, #4
 80013ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e029      	b.n	8001408 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 020e 	bic.w	r2, r2, #14
 80013c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0201 	bic.w	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f003 021c 	and.w	r2, r3, #28
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	4798      	blx	r3
    }
  }
  return status;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f003 031c 	and.w	r3, r3, #28
 8001432:	2204      	movs	r2, #4
 8001434:	409a      	lsls	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d026      	beq.n	800148c <HAL_DMA_IRQHandler+0x7a>
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d021      	beq.n	800148c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	2b00      	cmp	r3, #0
 8001454:	d107      	bne.n	8001466 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0204 	bic.w	r2, r2, #4
 8001464:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f003 021c 	and.w	r2, r3, #28
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2104      	movs	r1, #4
 8001474:	fa01 f202 	lsl.w	r2, r1, r2
 8001478:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	2b00      	cmp	r3, #0
 8001480:	d071      	beq.n	8001566 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800148a:	e06c      	b.n	8001566 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	f003 031c 	and.w	r3, r3, #28
 8001494:	2202      	movs	r2, #2
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d02e      	beq.n	80014fe <HAL_DMA_IRQHandler+0xec>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d029      	beq.n	80014fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10b      	bne.n	80014d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 020a 	bic.w	r2, r2, #10
 80014c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d4:	f003 021c 	and.w	r2, r3, #28
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	2102      	movs	r1, #2
 80014de:	fa01 f202 	lsl.w	r2, r1, r2
 80014e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d038      	beq.n	8001566 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014fc:	e033      	b.n	8001566 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f003 031c 	and.w	r3, r3, #28
 8001506:	2208      	movs	r2, #8
 8001508:	409a      	lsls	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d02a      	beq.n	8001568 <HAL_DMA_IRQHandler+0x156>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	2b00      	cmp	r3, #0
 800151a:	d025      	beq.n	8001568 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 020e 	bic.w	r2, r2, #14
 800152a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001530:	f003 021c 	and.w	r2, r3, #28
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f202 	lsl.w	r2, r1, r2
 800153e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001566:	bf00      	nop
 8001568:	bf00      	nop
}
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157e:	e17f      	b.n	8001880 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2101      	movs	r1, #1
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8171 	beq.w	800187a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d005      	beq.n	80015b0 <HAL_GPIO_Init+0x40>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d130      	bne.n	8001612 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015e6:	2201      	movs	r2, #1
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	091b      	lsrs	r3, r3, #4
 80015fc:	f003 0201 	and.w	r2, r3, #1
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b03      	cmp	r3, #3
 800161c:	d118      	bne.n	8001650 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001624:	2201      	movs	r2, #1
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	08db      	lsrs	r3, r3, #3
 800163a:	f003 0201 	and.w	r2, r3, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b03      	cmp	r3, #3
 800165a:	d017      	beq.n	800168c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d123      	bne.n	80016e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	08da      	lsrs	r2, r3, #3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3208      	adds	r2, #8
 80016a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	220f      	movs	r2, #15
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	691a      	ldr	r2, [r3, #16]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	08da      	lsrs	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3208      	adds	r2, #8
 80016da:	6939      	ldr	r1, [r7, #16]
 80016dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0203 	and.w	r2, r3, #3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80ac 	beq.w	800187a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b5f      	ldr	r3, [pc, #380]	; (80018a0 <HAL_GPIO_Init+0x330>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001726:	4a5e      	ldr	r2, [pc, #376]	; (80018a0 <HAL_GPIO_Init+0x330>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6613      	str	r3, [r2, #96]	; 0x60
 800172e:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <HAL_GPIO_Init+0x330>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800173a:	4a5a      	ldr	r2, [pc, #360]	; (80018a4 <HAL_GPIO_Init+0x334>)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001764:	d025      	beq.n	80017b2 <HAL_GPIO_Init+0x242>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4f      	ldr	r2, [pc, #316]	; (80018a8 <HAL_GPIO_Init+0x338>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01f      	beq.n	80017ae <HAL_GPIO_Init+0x23e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4e      	ldr	r2, [pc, #312]	; (80018ac <HAL_GPIO_Init+0x33c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x23a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4d      	ldr	r2, [pc, #308]	; (80018b0 <HAL_GPIO_Init+0x340>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x236>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4c      	ldr	r2, [pc, #304]	; (80018b4 <HAL_GPIO_Init+0x344>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x232>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4b      	ldr	r2, [pc, #300]	; (80018b8 <HAL_GPIO_Init+0x348>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x22e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <HAL_GPIO_Init+0x34c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x22a>
 8001796:	2306      	movs	r3, #6
 8001798:	e00c      	b.n	80017b4 <HAL_GPIO_Init+0x244>
 800179a:	2307      	movs	r3, #7
 800179c:	e00a      	b.n	80017b4 <HAL_GPIO_Init+0x244>
 800179e:	2305      	movs	r3, #5
 80017a0:	e008      	b.n	80017b4 <HAL_GPIO_Init+0x244>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x244>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e004      	b.n	80017b4 <HAL_GPIO_Init+0x244>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x244>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x244>
 80017b2:	2300      	movs	r3, #0
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	f002 0203 	and.w	r2, r2, #3
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	4093      	lsls	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017c4:	4937      	ldr	r1, [pc, #220]	; (80018a4 <HAL_GPIO_Init+0x334>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017d2:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_GPIO_Init+0x350>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017f6:	4a32      	ldr	r2, [pc, #200]	; (80018c0 <HAL_GPIO_Init+0x350>)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_GPIO_Init+0x350>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	43db      	mvns	r3, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001820:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <HAL_GPIO_Init+0x350>)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <HAL_GPIO_Init+0x350>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800184a:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <HAL_GPIO_Init+0x350>)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_GPIO_Init+0x350>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <HAL_GPIO_Init+0x350>)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	f47f ae78 	bne.w	8001580 <HAL_GPIO_Init+0x10>
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010000 	.word	0x40010000
 80018a8:	48000400 	.word	0x48000400
 80018ac:	48000800 	.word	0x48000800
 80018b0:	48000c00 	.word	0x48000c00
 80018b4:	48001000 	.word	0x48001000
 80018b8:	48001400 	.word	0x48001400
 80018bc:	48001800 	.word	0x48001800
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_PWREx_GetVoltageRange+0x18>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000

080018e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ee:	d130      	bne.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f0:	4b23      	ldr	r3, [pc, #140]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018fc:	d038      	beq.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001906:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2232      	movs	r2, #50	; 0x32
 8001914:	fb02 f303 	mul.w	r3, r2, r3
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0c9b      	lsrs	r3, r3, #18
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001924:	e002      	b.n	800192c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3b01      	subs	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001938:	d102      	bne.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f2      	bne.n	8001926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194c:	d110      	bne.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e00f      	b.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800195a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195e:	d007      	beq.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001968:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40007000 	.word	0x40007000
 8001984:	20000000 	.word	0x20000000
 8001988:	431bde83 	.word	0x431bde83

0800198c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e3ca      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199e:	4b97      	ldr	r3, [pc, #604]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a8:	4b94      	ldr	r3, [pc, #592]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80e4 	beq.w	8001b88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <HAL_RCC_OscConfig+0x4a>
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	f040 808b 	bne.w	8001ae4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	f040 8087 	bne.w	8001ae4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019d6:	4b89      	ldr	r3, [pc, #548]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e3a2      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1a      	ldr	r2, [r3, #32]
 80019f2:	4b82      	ldr	r3, [pc, #520]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <HAL_RCC_OscConfig+0x7c>
 80019fe:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a06:	e005      	b.n	8001a14 <HAL_RCC_OscConfig+0x88>
 8001a08:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d223      	bcs.n	8001a60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fd55 	bl	80024cc <RCC_SetFlashLatencyFromMSIRange>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e383      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2c:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a72      	ldr	r2, [pc, #456]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b70      	ldr	r3, [pc, #448]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	496d      	ldr	r1, [pc, #436]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4a:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	4968      	ldr	r1, [pc, #416]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
 8001a5e:	e025      	b.n	8001aac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a60:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	4960      	ldr	r1, [pc, #384]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	495b      	ldr	r1, [pc, #364]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fd15 	bl	80024cc <RCC_SetFlashLatencyFromMSIRange>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e343      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aac:	f000 fc4a 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b52      	ldr	r3, [pc, #328]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	4950      	ldr	r1, [pc, #320]	; (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac8:	4a4e      	ldr	r2, [pc, #312]	; (8001c04 <HAL_RCC_OscConfig+0x278>)
 8001aca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001acc:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <HAL_RCC_OscConfig+0x27c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f9d5 	bl	8000e80 <HAL_InitTick>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d052      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	e327      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d032      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aec:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fa12 	bl	8000f20 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b00:	f7ff fa0e 	bl	8000f20 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e310      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b12:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a36      	ldr	r2, [pc, #216]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4931      	ldr	r1, [pc, #196]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	492c      	ldr	r1, [pc, #176]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
 8001b50:	e01a      	b.n	8001b88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b52:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f9df 	bl	8000f20 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b66:	f7ff f9db 	bl	8000f20 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e2dd      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x1da>
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d074      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x21a>
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d10e      	bne.n	8001bbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d10b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d064      	beq.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d160      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e2ba      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x24a>
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e026      	b.n	8001c24 <HAL_RCC_OscConfig+0x298>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bde:	d115      	bne.n	8001c0c <HAL_RCC_OscConfig+0x280>
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a02      	ldr	r2, [pc, #8]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e014      	b.n	8001c24 <HAL_RCC_OscConfig+0x298>
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	080068cc 	.word	0x080068cc
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	4ba0      	ldr	r3, [pc, #640]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a9f      	ldr	r2, [pc, #636]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b9d      	ldr	r3, [pc, #628]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a9c      	ldr	r2, [pc, #624]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f978 	bl	8000f20 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff f974 	bl	8000f20 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e276      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c46:	4b92      	ldr	r3, [pc, #584]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2a8>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff f964 	bl	8000f20 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f960 	bl	8000f20 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e262      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6e:	4b88      	ldr	r3, [pc, #544]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2d0>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d060      	beq.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_OscConfig+0x310>
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d119      	bne.n	8001cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d116      	bne.n	8001cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9c:	4b7c      	ldr	r3, [pc, #496]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x328>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e23f      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	4973      	ldr	r1, [pc, #460]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc8:	e040      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d023      	beq.n	8001d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd2:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a6e      	ldr	r2, [pc, #440]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff f91f 	bl	8000f20 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff f91b 	bl	8000f20 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e21d      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf8:	4b65      	ldr	r3, [pc, #404]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b62      	ldr	r3, [pc, #392]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	495f      	ldr	r1, [pc, #380]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	e018      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b5d      	ldr	r3, [pc, #372]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a5c      	ldr	r2, [pc, #368]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff f8fb 	bl	8000f20 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff f8f7 	bl	8000f20 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e1f9      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d40:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d03c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d60:	4b4b      	ldr	r3, [pc, #300]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d66:	4a4a      	ldr	r2, [pc, #296]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff f8d6 	bl	8000f20 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff f8d2 	bl	8000f20 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1d4      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d8a:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ef      	beq.n	8001d78 <HAL_RCC_OscConfig+0x3ec>
 8001d98:	e01b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9a:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da0:	4a3b      	ldr	r2, [pc, #236]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7ff f8b9 	bl	8000f20 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff f8b5 	bl	8000f20 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e1b7      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc4:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ef      	bne.n	8001db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a6 	beq.w	8001f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10d      	bne.n	8001e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_RCC_OscConfig+0x508>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d118      	bne.n	8001e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <HAL_RCC_OscConfig+0x508>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <HAL_RCC_OscConfig+0x508>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e24:	f7ff f87c 	bl	8000f20 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7ff f878 	bl	8000f20 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e17a      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_RCC_OscConfig+0x508>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4d8>
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e62:	e029      	b.n	8001eb8 <HAL_RCC_OscConfig+0x52c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d115      	bne.n	8001e98 <HAL_RCC_OscConfig+0x50c>
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	4a03      	ldr	r2, [pc, #12]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8c:	e014      	b.n	8001eb8 <HAL_RCC_OscConfig+0x52c>
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40007000 	.word	0x40007000
 8001e98:	4b9c      	ldr	r3, [pc, #624]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	4a9b      	ldr	r2, [pc, #620]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea8:	4b98      	ldr	r3, [pc, #608]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eae:	4a97      	ldr	r2, [pc, #604]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d016      	beq.n	8001eee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7ff f82e 	bl	8000f20 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7ff f82a 	bl	8000f20 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e12a      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ede:	4b8b      	ldr	r3, [pc, #556]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0ed      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x53c>
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7ff f817 	bl	8000f20 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7ff f813 	bl	8000f20 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e113      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f0c:	4b7f      	ldr	r3, [pc, #508]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ed      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4b7a      	ldr	r3, [pc, #488]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	4a79      	ldr	r2, [pc, #484]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80fe 	beq.w	8002132 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	f040 80d0 	bne.w	80020e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f40:	4b72      	ldr	r3, [pc, #456]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d130      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d127      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d11f      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f80:	2a07      	cmp	r2, #7
 8001f82:	bf14      	ite	ne
 8001f84:	2201      	movne	r2, #1
 8001f86:	2200      	moveq	r2, #0
 8001f88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d113      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d109      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d06e      	beq.n	8002094 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	d069      	beq.n	8002090 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fbc:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fc8:	4b50      	ldr	r3, [pc, #320]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0ad      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b4c      	ldr	r3, [pc, #304]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a4b      	ldr	r2, [pc, #300]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8001fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fe4:	f7fe ff9c 	bl	8000f20 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe ff98 	bl	8000f20 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e09a      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200a:	4b40      	ldr	r3, [pc, #256]	; (800210c <HAL_RCC_OscConfig+0x780>)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	4b40      	ldr	r3, [pc, #256]	; (8002110 <HAL_RCC_OscConfig+0x784>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800201a:	3a01      	subs	r2, #1
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002024:	0212      	lsls	r2, r2, #8
 8002026:	4311      	orrs	r1, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800202c:	0852      	lsrs	r2, r2, #1
 800202e:	3a01      	subs	r2, #1
 8002030:	0552      	lsls	r2, r2, #21
 8002032:	4311      	orrs	r1, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002038:	0852      	lsrs	r2, r2, #1
 800203a:	3a01      	subs	r2, #1
 800203c:	0652      	lsls	r2, r2, #25
 800203e:	4311      	orrs	r1, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002044:	0912      	lsrs	r2, r2, #4
 8002046:	0452      	lsls	r2, r2, #17
 8002048:	430a      	orrs	r2, r1
 800204a:	4930      	ldr	r1, [pc, #192]	; (800210c <HAL_RCC_OscConfig+0x780>)
 800204c:	4313      	orrs	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002050:	4b2e      	ldr	r3, [pc, #184]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2d      	ldr	r2, [pc, #180]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8002056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800205c:	4b2b      	ldr	r3, [pc, #172]	; (800210c <HAL_RCC_OscConfig+0x780>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a2a      	ldr	r2, [pc, #168]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002068:	f7fe ff5a 	bl	8000f20 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7fe ff56 	bl	8000f20 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e058      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800208e:	e050      	b.n	8002132 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e04f      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_RCC_OscConfig+0x780>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d148      	bne.n	8002132 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_RCC_OscConfig+0x780>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a19      	ldr	r2, [pc, #100]	; (800210c <HAL_RCC_OscConfig+0x780>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_RCC_OscConfig+0x780>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a16      	ldr	r2, [pc, #88]	; (800210c <HAL_RCC_OscConfig+0x780>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020b8:	f7fe ff32 	bl	8000f20 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe ff2e 	bl	8000f20 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e030      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_RCC_OscConfig+0x780>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x734>
 80020de:	e028      	b.n	8002132 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d023      	beq.n	800212e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_OscConfig+0x780>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_RCC_OscConfig+0x780>)
 80020ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe ff15 	bl	8000f20 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f8:	e00c      	b.n	8002114 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fa:	f7fe ff11 	bl	8000f20 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d905      	bls.n	8002114 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e013      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
 800210c:	40021000 	.word	0x40021000
 8002110:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_OscConfig+0x7b0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1ec      	bne.n	80020fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_RCC_OscConfig+0x7b0>)
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	4905      	ldr	r1, [pc, #20]	; (800213c <HAL_RCC_OscConfig+0x7b0>)
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_OscConfig+0x7b4>)
 8002128:	4013      	ands	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
 800212c:	e001      	b.n	8002132 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3720      	adds	r7, #32
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	feeefffc 	.word	0xfeeefffc

08002144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0e7      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b75      	ldr	r3, [pc, #468]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d910      	bls.n	8002188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b72      	ldr	r3, [pc, #456]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4970      	ldr	r1, [pc, #448]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b6e      	ldr	r3, [pc, #440]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0cf      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d010      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	4b66      	ldr	r3, [pc, #408]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d908      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a4:	4b63      	ldr	r3, [pc, #396]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4960      	ldr	r1, [pc, #384]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d04c      	beq.n	800225c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ca:	4b5a      	ldr	r3, [pc, #360]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d121      	bne.n	800221a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0a6      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e2:	4b54      	ldr	r3, [pc, #336]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d115      	bne.n	800221a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e09a      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021fa:	4b4e      	ldr	r3, [pc, #312]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e08e      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220a:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e086      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b46      	ldr	r3, [pc, #280]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4943      	ldr	r1, [pc, #268]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800222c:	f7fe fe78 	bl	8000f20 <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7fe fe74 	bl	8000f20 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e06e      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d010      	beq.n	800228a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002274:	429a      	cmp	r2, r3
 8002276:	d208      	bcs.n	800228a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002278:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	492b      	ldr	r1, [pc, #172]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d210      	bcs.n	80022ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 0207 	bic.w	r2, r3, #7
 80022a0:	4923      	ldr	r1, [pc, #140]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_RCC_ClockConfig+0x1ec>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e036      	b.n	8002328 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4918      	ldr	r1, [pc, #96]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4910      	ldr	r1, [pc, #64]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022f8:	f000 f824 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	490b      	ldr	r1, [pc, #44]	; (8002338 <HAL_RCC_ClockConfig+0x1f4>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
 8002314:	4a09      	ldr	r2, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1f8>)
 8002316:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x1fc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fdaf 	bl	8000e80 <HAL_InitTick>
 8002322:	4603      	mov	r3, r0
 8002324:	72fb      	strb	r3, [r7, #11]

  return status;
 8002326:	7afb      	ldrb	r3, [r7, #11]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40022000 	.word	0x40022000
 8002334:	40021000 	.word	0x40021000
 8002338:	080068cc 	.word	0x080068cc
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002352:	4b3e      	ldr	r3, [pc, #248]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800235c:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x34>
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d121      	bne.n	80023b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d11e      	bne.n	80023b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002378:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002384:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 8002386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	e005      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023a0:	4a2b      	ldr	r2, [pc, #172]	; (8002450 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10d      	bne.n	80023cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d102      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023bc:	4b25      	ldr	r3, [pc, #148]	; (8002454 <HAL_RCC_GetSysClockFreq+0x110>)
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	e004      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	d134      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0xa6>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d003      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0xac>
 80023e8:	e005      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ec:	617b      	str	r3, [r7, #20]
      break;
 80023ee:	e005      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_RCC_GetSysClockFreq+0x114>)
 80023f2:	617b      	str	r3, [r7, #20]
      break;
 80023f4:	e002      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	617b      	str	r3, [r7, #20]
      break;
 80023fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	3301      	adds	r3, #1
 8002408:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	fb03 f202 	mul.w	r2, r3, r2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_RCC_GetSysClockFreq+0x108>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	0e5b      	lsrs	r3, r3, #25
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	3301      	adds	r3, #1
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800243c:	69bb      	ldr	r3, [r7, #24]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	080068e4 	.word	0x080068e4
 8002454:	00f42400 	.word	0x00f42400
 8002458:	007a1200 	.word	0x007a1200

0800245c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_RCC_GetHCLKFreq+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000000 	.word	0x20000000

08002474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002478:	f7ff fff0 	bl	800245c <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4904      	ldr	r1, [pc, #16]	; (800249c <HAL_RCC_GetPCLK1Freq+0x28>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	080068dc 	.word	0x080068dc

080024a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024a4:	f7ff ffda 	bl	800245c <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0adb      	lsrs	r3, r3, #11
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4904      	ldr	r1, [pc, #16]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	080068dc 	.word	0x080068dc

080024cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024d8:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024e4:	f7ff f9ee 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
 80024e8:	6178      	str	r0, [r7, #20]
 80024ea:	e014      	b.n	8002516 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f6:	6593      	str	r3, [r2, #88]	; 0x58
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002504:	f7ff f9de 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
 8002508:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002514:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800251c:	d10b      	bne.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b80      	cmp	r3, #128	; 0x80
 8002522:	d919      	bls.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2ba0      	cmp	r3, #160	; 0xa0
 8002528:	d902      	bls.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800252a:	2302      	movs	r3, #2
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	e013      	b.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002530:	2301      	movs	r3, #1
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	e010      	b.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b80      	cmp	r3, #128	; 0x80
 800253a:	d902      	bls.n	8002542 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800253c:	2303      	movs	r3, #3
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	e00a      	b.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b80      	cmp	r3, #128	; 0x80
 8002546:	d102      	bne.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002548:	2302      	movs	r3, #2
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	e004      	b.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b70      	cmp	r3, #112	; 0x70
 8002552:	d101      	bne.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002554:	2301      	movs	r3, #1
 8002556:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 0207 	bic.w	r2, r3, #7
 8002560:	4909      	ldr	r1, [pc, #36]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	40022000 	.word	0x40022000

0800258c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002594:	2300      	movs	r3, #0
 8002596:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002598:	2300      	movs	r3, #0
 800259a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d041      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025b0:	d02a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025b6:	d824      	bhi.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025bc:	d008      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025c2:	d81e      	bhi.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025cc:	d010      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025ce:	e018      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025d0:	4b86      	ldr	r3, [pc, #536]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a85      	ldr	r2, [pc, #532]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025dc:	e015      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fabb 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 80025ea:	4603      	mov	r3, r0
 80025ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ee:	e00c      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3320      	adds	r3, #32
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fba6 	bl	8002d48 <RCCEx_PLLSAI2_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002600:	e003      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	74fb      	strb	r3, [r7, #19]
      break;
 8002606:	e000      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10b      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002610:	4b76      	ldr	r3, [pc, #472]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800261e:	4973      	ldr	r1, [pc, #460]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002626:	e001      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d041      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800263c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002640:	d02a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002642:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002646:	d824      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002648:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800264c:	d008      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800264e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002652:	d81e      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800265c:	d010      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800265e:	e018      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002660:	4b62      	ldr	r3, [pc, #392]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a61      	ldr	r2, [pc, #388]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800266c:	e015      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fa73 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 800267a:	4603      	mov	r3, r0
 800267c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800267e:	e00c      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3320      	adds	r3, #32
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fb5e 	bl	8002d48 <RCCEx_PLLSAI2_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002690:	e003      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	74fb      	strb	r3, [r7, #19]
      break;
 8002696:	e000      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10b      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026a0:	4b52      	ldr	r3, [pc, #328]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ae:	494f      	ldr	r1, [pc, #316]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026b6:	e001      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80a0 	beq.w	800280a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026de:	2300      	movs	r3, #0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00d      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e4:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4a40      	ldr	r2, [pc, #256]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	; 0x58
 80026f0:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fc:	2301      	movs	r3, #1
 80026fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002700:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a3a      	ldr	r2, [pc, #232]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800270c:	f7fe fc08 	bl	8000f20 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002712:	e009      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002714:	f7fe fc04 	bl	8000f20 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d902      	bls.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	74fb      	strb	r3, [r7, #19]
        break;
 8002726:	e005      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002728:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ef      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d15c      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800273a:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002744:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01f      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	d019      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002762:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002764:	4b21      	ldr	r3, [pc, #132]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	4a20      	ldr	r2, [pc, #128]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002784:	4a19      	ldr	r2, [pc, #100]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fbc3 	bl	8000f20 <HAL_GetTick>
 800279a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279c:	e00b      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fbbf 	bl	8000f20 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d902      	bls.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	74fb      	strb	r3, [r7, #19]
            break;
 80027b4:	e006      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ec      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027da:	4904      	ldr	r1, [pc, #16]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027e2:	e009      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	74bb      	strb	r3, [r7, #18]
 80027e8:	e006      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f8:	7c7b      	ldrb	r3, [r7, #17]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d105      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fe:	4b9e      	ldr	r3, [pc, #632]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	4a9d      	ldr	r2, [pc, #628]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002808:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002816:	4b98      	ldr	r3, [pc, #608]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	f023 0203 	bic.w	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002824:	4994      	ldr	r1, [pc, #592]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002838:	4b8f      	ldr	r3, [pc, #572]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f023 020c 	bic.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	498c      	ldr	r1, [pc, #560]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800285a:	4b87      	ldr	r3, [pc, #540]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002860:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	4983      	ldr	r1, [pc, #524]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800287c:	4b7e      	ldr	r3, [pc, #504]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002882:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	497b      	ldr	r1, [pc, #492]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800289e:	4b76      	ldr	r3, [pc, #472]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ac:	4972      	ldr	r1, [pc, #456]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c0:	4b6d      	ldr	r3, [pc, #436]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	496a      	ldr	r1, [pc, #424]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028e2:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	4961      	ldr	r1, [pc, #388]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002904:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002912:	4959      	ldr	r1, [pc, #356]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002926:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002934:	4950      	ldr	r1, [pc, #320]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002948:	4b4b      	ldr	r3, [pc, #300]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	4948      	ldr	r1, [pc, #288]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800296a:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	493f      	ldr	r1, [pc, #252]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d028      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800298c:	4b3a      	ldr	r3, [pc, #232]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800299a:	4937      	ldr	r1, [pc, #220]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029aa:	d106      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ac:	4b32      	ldr	r3, [pc, #200]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a31      	ldr	r2, [pc, #196]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b6:	60d3      	str	r3, [r2, #12]
 80029b8:	e011      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029c2:	d10c      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f8c8 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d028      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029ea:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	491f      	ldr	r1, [pc, #124]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a08:	d106      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4a1a      	ldr	r2, [pc, #104]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a14:	60d3      	str	r3, [r2, #12]
 8002a16:	e011      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2101      	movs	r1, #1
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f899 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a32:	7cfb      	ldrb	r3, [r7, #19]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d02b      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a56:	4908      	ldr	r1, [pc, #32]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a66:	d109      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a02      	ldr	r2, [pc, #8]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a72:	60d3      	str	r3, [r2, #12]
 8002a74:	e014      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f867 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d02f      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aba:	4928      	ldr	r1, [pc, #160]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aca:	d10d      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f844 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d014      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	74bb      	strb	r3, [r7, #18]
 8002ae6:	e011      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3320      	adds	r3, #32
 8002af6:	2102      	movs	r1, #2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 f925 	bl	8002d48 <RCCEx_PLLSAI2_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b26:	490d      	ldr	r1, [pc, #52]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00b      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b4a:	4904      	ldr	r1, [pc, #16]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b52:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000

08002b60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b6e:	4b75      	ldr	r3, [pc, #468]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d018      	beq.n	8002bac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b7a:	4b72      	ldr	r3, [pc, #456]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0203 	and.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d10d      	bne.n	8002ba6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b92:	4b6c      	ldr	r3, [pc, #432]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d047      	beq.n	8002c36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	e044      	b.n	8002c36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d018      	beq.n	8002be6 <RCCEx_PLLSAI1_Config+0x86>
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d825      	bhi.n	8002c04 <RCCEx_PLLSAI1_Config+0xa4>
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d002      	beq.n	8002bc2 <RCCEx_PLLSAI1_Config+0x62>
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d009      	beq.n	8002bd4 <RCCEx_PLLSAI1_Config+0x74>
 8002bc0:	e020      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bc2:	4b60      	ldr	r3, [pc, #384]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11d      	bne.n	8002c0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd2:	e01a      	b.n	8002c0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bd4:	4b5b      	ldr	r3, [pc, #364]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d116      	bne.n	8002c0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be4:	e013      	b.n	8002c0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002be6:	4b57      	ldr	r3, [pc, #348]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10f      	bne.n	8002c12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bf2:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c02:	e006      	b.n	8002c12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      break;
 8002c08:	e004      	b.n	8002c14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e002      	b.n	8002c14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e000      	b.n	8002c14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c12:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10d      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c1a:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	430b      	orrs	r3, r1
 8002c30:	4944      	ldr	r1, [pc, #272]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d17d      	bne.n	8002d38 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c3c:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a40      	ldr	r2, [pc, #256]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c48:	f7fe f96a 	bl	8000f20 <HAL_GetTick>
 8002c4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c4e:	e009      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c50:	f7fe f966 	bl	8000f20 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d902      	bls.n	8002c64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	73fb      	strb	r3, [r7, #15]
        break;
 8002c62:	e005      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c64:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1ef      	bne.n	8002c50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d160      	bne.n	8002d38 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d111      	bne.n	8002ca0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c7c:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6892      	ldr	r2, [r2, #8]
 8002c8c:	0211      	lsls	r1, r2, #8
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68d2      	ldr	r2, [r2, #12]
 8002c92:	0912      	lsrs	r2, r2, #4
 8002c94:	0452      	lsls	r2, r2, #17
 8002c96:	430a      	orrs	r2, r1
 8002c98:	492a      	ldr	r1, [pc, #168]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	610b      	str	r3, [r1, #16]
 8002c9e:	e027      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d112      	bne.n	8002ccc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca6:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6892      	ldr	r2, [r2, #8]
 8002cb6:	0211      	lsls	r1, r2, #8
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6912      	ldr	r2, [r2, #16]
 8002cbc:	0852      	lsrs	r2, r2, #1
 8002cbe:	3a01      	subs	r2, #1
 8002cc0:	0552      	lsls	r2, r2, #21
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	491f      	ldr	r1, [pc, #124]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	610b      	str	r3, [r1, #16]
 8002cca:	e011      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6892      	ldr	r2, [r2, #8]
 8002cdc:	0211      	lsls	r1, r2, #8
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6952      	ldr	r2, [r2, #20]
 8002ce2:	0852      	lsrs	r2, r2, #1
 8002ce4:	3a01      	subs	r2, #1
 8002ce6:	0652      	lsls	r2, r2, #25
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	4916      	ldr	r1, [pc, #88]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe f910 	bl	8000f20 <HAL_GetTick>
 8002d00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d02:	e009      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d04:	f7fe f90c 	bl	8000f20 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d902      	bls.n	8002d18 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	73fb      	strb	r3, [r7, #15]
          break;
 8002d16:	e005      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ef      	beq.n	8002d04 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	4904      	ldr	r1, [pc, #16]	; (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000

08002d48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d56:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d018      	beq.n	8002d94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d10d      	bne.n	8002d8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
       ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d7a:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
       ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d047      	beq.n	8002e1e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	e044      	b.n	8002e1e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d018      	beq.n	8002dce <RCCEx_PLLSAI2_Config+0x86>
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d825      	bhi.n	8002dec <RCCEx_PLLSAI2_Config+0xa4>
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d002      	beq.n	8002daa <RCCEx_PLLSAI2_Config+0x62>
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d009      	beq.n	8002dbc <RCCEx_PLLSAI2_Config+0x74>
 8002da8:	e020      	b.n	8002dec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002daa:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11d      	bne.n	8002df2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dba:	e01a      	b.n	8002df2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d116      	bne.n	8002df6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dcc:	e013      	b.n	8002df6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dce:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dda:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dea:	e006      	b.n	8002dfa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      break;
 8002df0:	e004      	b.n	8002dfc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002df2:	bf00      	nop
 8002df4:	e002      	b.n	8002dfc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10d      	bne.n	8002e1e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e02:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	430b      	orrs	r3, r1
 8002e18:	4939      	ldr	r1, [pc, #228]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d167      	bne.n	8002ef4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e24:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a35      	ldr	r2, [pc, #212]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e30:	f7fe f876 	bl	8000f20 <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e36:	e009      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e38:	f7fe f872 	bl	8000f20 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	73fb      	strb	r3, [r7, #15]
        break;
 8002e4a:	e005      	b.n	8002e58 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ef      	bne.n	8002e38 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d14a      	bne.n	8002ef4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e64:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6892      	ldr	r2, [r2, #8]
 8002e74:	0211      	lsls	r1, r2, #8
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68d2      	ldr	r2, [r2, #12]
 8002e7a:	0912      	lsrs	r2, r2, #4
 8002e7c:	0452      	lsls	r2, r2, #17
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	491f      	ldr	r1, [pc, #124]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	614b      	str	r3, [r1, #20]
 8002e86:	e011      	b.n	8002eac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6892      	ldr	r2, [r2, #8]
 8002e98:	0211      	lsls	r1, r2, #8
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6912      	ldr	r2, [r2, #16]
 8002e9e:	0852      	lsrs	r2, r2, #1
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	0652      	lsls	r2, r2, #25
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	4916      	ldr	r1, [pc, #88]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fe f832 	bl	8000f20 <HAL_GetTick>
 8002ebc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ebe:	e009      	b.n	8002ed4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ec0:	f7fe f82e 	bl	8000f20 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d902      	bls.n	8002ed4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ed2:	e005      	b.n	8002ee0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ef      	beq.n	8002ec0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4904      	ldr	r1, [pc, #16]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000

08002f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e049      	b.n	8002faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fd fd64 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f000 fb7a 	bl	800363c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e049      	b.n	8003058 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f841 	bl	8003060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f000 fb23 	bl	800363c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_TIM_PWM_Start+0x24>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e03c      	b.n	8003112 <HAL_TIM_PWM_Start+0x9e>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b04      	cmp	r3, #4
 800309c:	d109      	bne.n	80030b2 <HAL_TIM_PWM_Start+0x3e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e02f      	b.n	8003112 <HAL_TIM_PWM_Start+0x9e>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d109      	bne.n	80030cc <HAL_TIM_PWM_Start+0x58>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e022      	b.n	8003112 <HAL_TIM_PWM_Start+0x9e>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d109      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x72>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e015      	b.n	8003112 <HAL_TIM_PWM_Start+0x9e>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d109      	bne.n	8003100 <HAL_TIM_PWM_Start+0x8c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e008      	b.n	8003112 <HAL_TIM_PWM_Start+0x9e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e09c      	b.n	8003254 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <HAL_TIM_PWM_Start+0xb6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003128:	e023      	b.n	8003172 <HAL_TIM_PWM_Start+0xfe>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d104      	bne.n	800313a <HAL_TIM_PWM_Start+0xc6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003138:	e01b      	b.n	8003172 <HAL_TIM_PWM_Start+0xfe>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d104      	bne.n	800314a <HAL_TIM_PWM_Start+0xd6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003148:	e013      	b.n	8003172 <HAL_TIM_PWM_Start+0xfe>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b0c      	cmp	r3, #12
 800314e:	d104      	bne.n	800315a <HAL_TIM_PWM_Start+0xe6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003158:	e00b      	b.n	8003172 <HAL_TIM_PWM_Start+0xfe>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b10      	cmp	r3, #16
 800315e:	d104      	bne.n	800316a <HAL_TIM_PWM_Start+0xf6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003168:	e003      	b.n	8003172 <HAL_TIM_PWM_Start+0xfe>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2201      	movs	r2, #1
 8003178:	6839      	ldr	r1, [r7, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fe68 	bl	8003e50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a35      	ldr	r2, [pc, #212]	; (800325c <HAL_TIM_PWM_Start+0x1e8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_TIM_PWM_Start+0x13e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a34      	ldr	r2, [pc, #208]	; (8003260 <HAL_TIM_PWM_Start+0x1ec>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_TIM_PWM_Start+0x13e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a32      	ldr	r2, [pc, #200]	; (8003264 <HAL_TIM_PWM_Start+0x1f0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_TIM_PWM_Start+0x13e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a31      	ldr	r2, [pc, #196]	; (8003268 <HAL_TIM_PWM_Start+0x1f4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_TIM_PWM_Start+0x13e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2f      	ldr	r2, [pc, #188]	; (800326c <HAL_TIM_PWM_Start+0x1f8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_PWM_Start+0x142>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_TIM_PWM_Start+0x144>
 80031b6:	2300      	movs	r3, #0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d007      	beq.n	80031cc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a22      	ldr	r2, [pc, #136]	; (800325c <HAL_TIM_PWM_Start+0x1e8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01d      	beq.n	8003212 <HAL_TIM_PWM_Start+0x19e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031de:	d018      	beq.n	8003212 <HAL_TIM_PWM_Start+0x19e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a22      	ldr	r2, [pc, #136]	; (8003270 <HAL_TIM_PWM_Start+0x1fc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_TIM_PWM_Start+0x19e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a21      	ldr	r2, [pc, #132]	; (8003274 <HAL_TIM_PWM_Start+0x200>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_TIM_PWM_Start+0x19e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <HAL_TIM_PWM_Start+0x204>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_TIM_PWM_Start+0x19e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a17      	ldr	r2, [pc, #92]	; (8003260 <HAL_TIM_PWM_Start+0x1ec>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_TIM_PWM_Start+0x19e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a15      	ldr	r2, [pc, #84]	; (8003264 <HAL_TIM_PWM_Start+0x1f0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d115      	bne.n	800323e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <HAL_TIM_PWM_Start+0x208>)
 800321a:	4013      	ands	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b06      	cmp	r3, #6
 8003222:	d015      	beq.n	8003250 <HAL_TIM_PWM_Start+0x1dc>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322a:	d011      	beq.n	8003250 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	e008      	b.n	8003250 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0201 	orr.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e000      	b.n	8003252 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40013400 	.word	0x40013400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800
 8003278:	40000c00 	.word	0x40000c00
 800327c:	00010007 	.word	0x00010007

08003280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800329a:	2302      	movs	r3, #2
 800329c:	e0ff      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b14      	cmp	r3, #20
 80032aa:	f200 80f0 	bhi.w	800348e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032ae:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	08003309 	.word	0x08003309
 80032b8:	0800348f 	.word	0x0800348f
 80032bc:	0800348f 	.word	0x0800348f
 80032c0:	0800348f 	.word	0x0800348f
 80032c4:	08003349 	.word	0x08003349
 80032c8:	0800348f 	.word	0x0800348f
 80032cc:	0800348f 	.word	0x0800348f
 80032d0:	0800348f 	.word	0x0800348f
 80032d4:	0800338b 	.word	0x0800338b
 80032d8:	0800348f 	.word	0x0800348f
 80032dc:	0800348f 	.word	0x0800348f
 80032e0:	0800348f 	.word	0x0800348f
 80032e4:	080033cb 	.word	0x080033cb
 80032e8:	0800348f 	.word	0x0800348f
 80032ec:	0800348f 	.word	0x0800348f
 80032f0:	0800348f 	.word	0x0800348f
 80032f4:	0800340d 	.word	0x0800340d
 80032f8:	0800348f 	.word	0x0800348f
 80032fc:	0800348f 	.word	0x0800348f
 8003300:	0800348f 	.word	0x0800348f
 8003304:	0800344d 	.word	0x0800344d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fa2e 	bl	8003770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0208 	orr.w	r2, r2, #8
 8003322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0204 	bic.w	r2, r2, #4
 8003332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6999      	ldr	r1, [r3, #24]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	619a      	str	r2, [r3, #24]
      break;
 8003346:	e0a5      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fa9e 	bl	8003890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6999      	ldr	r1, [r3, #24]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	021a      	lsls	r2, r3, #8
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	619a      	str	r2, [r3, #24]
      break;
 8003388:	e084      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fb07 	bl	80039a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0208 	orr.w	r2, r2, #8
 80033a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0204 	bic.w	r2, r2, #4
 80033b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69d9      	ldr	r1, [r3, #28]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	61da      	str	r2, [r3, #28]
      break;
 80033c8:	e064      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fb6f 	bl	8003ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69d9      	ldr	r1, [r3, #28]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	021a      	lsls	r2, r3, #8
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	61da      	str	r2, [r3, #28]
      break;
 800340a:	e043      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fbb8 	bl	8003b88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0208 	orr.w	r2, r2, #8
 8003426:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0204 	bic.w	r2, r2, #4
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800344a:	e023      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fbfc 	bl	8003c50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003466:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	021a      	lsls	r2, r3, #8
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800348c:	e002      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
      break;
 8003492:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop

080034a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIM_ConfigClockSource+0x1c>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e0b6      	b.n	8003632 <HAL_TIM_ConfigClockSource+0x18a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003500:	d03e      	beq.n	8003580 <HAL_TIM_ConfigClockSource+0xd8>
 8003502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003506:	f200 8087 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x170>
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350e:	f000 8086 	beq.w	800361e <HAL_TIM_ConfigClockSource+0x176>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003516:	d87f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003518:	2b70      	cmp	r3, #112	; 0x70
 800351a:	d01a      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0xaa>
 800351c:	2b70      	cmp	r3, #112	; 0x70
 800351e:	d87b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003520:	2b60      	cmp	r3, #96	; 0x60
 8003522:	d050      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x11e>
 8003524:	2b60      	cmp	r3, #96	; 0x60
 8003526:	d877      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003528:	2b50      	cmp	r3, #80	; 0x50
 800352a:	d03c      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0xfe>
 800352c:	2b50      	cmp	r3, #80	; 0x50
 800352e:	d873      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d058      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x13e>
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d86f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003538:	2b30      	cmp	r3, #48	; 0x30
 800353a:	d064      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15e>
 800353c:	2b30      	cmp	r3, #48	; 0x30
 800353e:	d86b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d060      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15e>
 8003544:	2b20      	cmp	r3, #32
 8003546:	d867      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d05c      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15e>
 800354c:	2b10      	cmp	r3, #16
 800354e:	d05a      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15e>
 8003550:	e062      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003562:	f000 fc55 	bl	8003e10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	609a      	str	r2, [r3, #8]
      break;
 800357e:	e04f      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003590:	f000 fc3e 	bl	8003e10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035a2:	609a      	str	r2, [r3, #8]
      break;
 80035a4:	e03c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 fbb2 	bl	8003d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2150      	movs	r1, #80	; 0x50
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fc0b 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 80035c4:	e02c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035d2:	461a      	mov	r2, r3
 80035d4:	f000 fbd1 	bl	8003d7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2160      	movs	r1, #96	; 0x60
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fbfb 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 80035e4:	e01c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f2:	461a      	mov	r2, r3
 80035f4:	f000 fb92 	bl	8003d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2140      	movs	r1, #64	; 0x40
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fbeb 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 8003604:	e00c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f000 fbe2 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 8003616:	e003      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e000      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800361e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a40      	ldr	r2, [pc, #256]	; (8003750 <TIM_Base_SetConfig+0x114>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d00f      	beq.n	800367c <TIM_Base_SetConfig+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a3d      	ldr	r2, [pc, #244]	; (8003754 <TIM_Base_SetConfig+0x118>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00b      	beq.n	800367c <TIM_Base_SetConfig+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a3c      	ldr	r2, [pc, #240]	; (8003758 <TIM_Base_SetConfig+0x11c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d007      	beq.n	800367c <TIM_Base_SetConfig+0x40>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a3b      	ldr	r2, [pc, #236]	; (800375c <TIM_Base_SetConfig+0x120>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <TIM_Base_SetConfig+0x40>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a3a      	ldr	r2, [pc, #232]	; (8003760 <TIM_Base_SetConfig+0x124>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d108      	bne.n	800368e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a2f      	ldr	r2, [pc, #188]	; (8003750 <TIM_Base_SetConfig+0x114>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01f      	beq.n	80036d6 <TIM_Base_SetConfig+0x9a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369c:	d01b      	beq.n	80036d6 <TIM_Base_SetConfig+0x9a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2c      	ldr	r2, [pc, #176]	; (8003754 <TIM_Base_SetConfig+0x118>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d017      	beq.n	80036d6 <TIM_Base_SetConfig+0x9a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2b      	ldr	r2, [pc, #172]	; (8003758 <TIM_Base_SetConfig+0x11c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <TIM_Base_SetConfig+0x9a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2a      	ldr	r2, [pc, #168]	; (800375c <TIM_Base_SetConfig+0x120>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00f      	beq.n	80036d6 <TIM_Base_SetConfig+0x9a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a29      	ldr	r2, [pc, #164]	; (8003760 <TIM_Base_SetConfig+0x124>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <TIM_Base_SetConfig+0x9a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a28      	ldr	r2, [pc, #160]	; (8003764 <TIM_Base_SetConfig+0x128>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <TIM_Base_SetConfig+0x9a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a27      	ldr	r2, [pc, #156]	; (8003768 <TIM_Base_SetConfig+0x12c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d003      	beq.n	80036d6 <TIM_Base_SetConfig+0x9a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a26      	ldr	r2, [pc, #152]	; (800376c <TIM_Base_SetConfig+0x130>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d108      	bne.n	80036e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <TIM_Base_SetConfig+0x114>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00f      	beq.n	8003734 <TIM_Base_SetConfig+0xf8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a12      	ldr	r2, [pc, #72]	; (8003760 <TIM_Base_SetConfig+0x124>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00b      	beq.n	8003734 <TIM_Base_SetConfig+0xf8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a11      	ldr	r2, [pc, #68]	; (8003764 <TIM_Base_SetConfig+0x128>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <TIM_Base_SetConfig+0xf8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <TIM_Base_SetConfig+0x12c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_Base_SetConfig+0xf8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a0f      	ldr	r2, [pc, #60]	; (800376c <TIM_Base_SetConfig+0x130>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d103      	bne.n	800373c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	615a      	str	r2, [r3, #20]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800
 800375c:	40000c00 	.word	0x40000c00
 8003760:	40013400 	.word	0x40013400
 8003764:	40014000 	.word	0x40014000
 8003768:	40014400 	.word	0x40014400
 800376c:	40014800 	.word	0x40014800

08003770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f023 0201 	bic.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0303 	bic.w	r3, r3, #3
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f023 0302 	bic.w	r3, r3, #2
 80037bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a2c      	ldr	r2, [pc, #176]	; (800387c <TIM_OC1_SetConfig+0x10c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00f      	beq.n	80037f0 <TIM_OC1_SetConfig+0x80>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a2b      	ldr	r2, [pc, #172]	; (8003880 <TIM_OC1_SetConfig+0x110>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00b      	beq.n	80037f0 <TIM_OC1_SetConfig+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <TIM_OC1_SetConfig+0x114>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d007      	beq.n	80037f0 <TIM_OC1_SetConfig+0x80>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a29      	ldr	r2, [pc, #164]	; (8003888 <TIM_OC1_SetConfig+0x118>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_OC1_SetConfig+0x80>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a28      	ldr	r2, [pc, #160]	; (800388c <TIM_OC1_SetConfig+0x11c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10c      	bne.n	800380a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0308 	bic.w	r3, r3, #8
 80037f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 0304 	bic.w	r3, r3, #4
 8003808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1b      	ldr	r2, [pc, #108]	; (800387c <TIM_OC1_SetConfig+0x10c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00f      	beq.n	8003832 <TIM_OC1_SetConfig+0xc2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1a      	ldr	r2, [pc, #104]	; (8003880 <TIM_OC1_SetConfig+0x110>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00b      	beq.n	8003832 <TIM_OC1_SetConfig+0xc2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a19      	ldr	r2, [pc, #100]	; (8003884 <TIM_OC1_SetConfig+0x114>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d007      	beq.n	8003832 <TIM_OC1_SetConfig+0xc2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a18      	ldr	r2, [pc, #96]	; (8003888 <TIM_OC1_SetConfig+0x118>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d003      	beq.n	8003832 <TIM_OC1_SetConfig+0xc2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a17      	ldr	r2, [pc, #92]	; (800388c <TIM_OC1_SetConfig+0x11c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d111      	bne.n	8003856 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	621a      	str	r2, [r3, #32]
}
 8003870:	bf00      	nop
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40013400 	.word	0x40013400
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400
 800388c:	40014800 	.word	0x40014800

08003890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f023 0210 	bic.w	r2, r3, #16
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0320 	bic.w	r3, r3, #32
 80038de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a28      	ldr	r2, [pc, #160]	; (8003990 <TIM_OC2_SetConfig+0x100>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_OC2_SetConfig+0x6c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a27      	ldr	r2, [pc, #156]	; (8003994 <TIM_OC2_SetConfig+0x104>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10d      	bne.n	8003918 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003916:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <TIM_OC2_SetConfig+0x100>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00f      	beq.n	8003940 <TIM_OC2_SetConfig+0xb0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a1c      	ldr	r2, [pc, #112]	; (8003994 <TIM_OC2_SetConfig+0x104>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00b      	beq.n	8003940 <TIM_OC2_SetConfig+0xb0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <TIM_OC2_SetConfig+0x108>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d007      	beq.n	8003940 <TIM_OC2_SetConfig+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a1a      	ldr	r2, [pc, #104]	; (800399c <TIM_OC2_SetConfig+0x10c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d003      	beq.n	8003940 <TIM_OC2_SetConfig+0xb0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <TIM_OC2_SetConfig+0x110>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d113      	bne.n	8003968 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800394e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40013400 	.word	0x40013400
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800

080039a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <TIM_OC3_SetConfig+0xfc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_OC3_SetConfig+0x6a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a26      	ldr	r2, [pc, #152]	; (8003aa4 <TIM_OC3_SetConfig+0x100>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10d      	bne.n	8003a2a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <TIM_OC3_SetConfig+0xfc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00f      	beq.n	8003a52 <TIM_OC3_SetConfig+0xae>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <TIM_OC3_SetConfig+0x100>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <TIM_OC3_SetConfig+0xae>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	; (8003aa8 <TIM_OC3_SetConfig+0x104>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <TIM_OC3_SetConfig+0xae>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a19      	ldr	r2, [pc, #100]	; (8003aac <TIM_OC3_SetConfig+0x108>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_OC3_SetConfig+0xae>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <TIM_OC3_SetConfig+0x10c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d113      	bne.n	8003a7a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40013400 	.word	0x40013400
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	40014400 	.word	0x40014400
 8003ab0:	40014800 	.word	0x40014800

08003ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	031b      	lsls	r3, r3, #12
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <TIM_OC4_SetConfig+0xc0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00f      	beq.n	8003b38 <TIM_OC4_SetConfig+0x84>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <TIM_OC4_SetConfig+0xc4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00b      	beq.n	8003b38 <TIM_OC4_SetConfig+0x84>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a16      	ldr	r2, [pc, #88]	; (8003b7c <TIM_OC4_SetConfig+0xc8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d007      	beq.n	8003b38 <TIM_OC4_SetConfig+0x84>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <TIM_OC4_SetConfig+0xcc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_OC4_SetConfig+0x84>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <TIM_OC4_SetConfig+0xd0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d109      	bne.n	8003b4c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	019b      	lsls	r3, r3, #6
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40013400 	.word	0x40013400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800

08003b88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003bcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <TIM_OC5_SetConfig+0xb4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00f      	beq.n	8003c02 <TIM_OC5_SetConfig+0x7a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <TIM_OC5_SetConfig+0xb8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <TIM_OC5_SetConfig+0x7a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <TIM_OC5_SetConfig+0xbc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_OC5_SetConfig+0x7a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <TIM_OC5_SetConfig+0xc0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC5_SetConfig+0x7a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <TIM_OC5_SetConfig+0xc4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d109      	bne.n	8003c16 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40013400 	.word	0x40013400
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800

08003c50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	051b      	lsls	r3, r3, #20
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <TIM_OC6_SetConfig+0xb8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00f      	beq.n	8003ccc <TIM_OC6_SetConfig+0x7c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <TIM_OC6_SetConfig+0xbc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <TIM_OC6_SetConfig+0x7c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <TIM_OC6_SetConfig+0xc0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <TIM_OC6_SetConfig+0x7c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a15      	ldr	r2, [pc, #84]	; (8003d14 <TIM_OC6_SetConfig+0xc4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_OC6_SetConfig+0x7c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <TIM_OC6_SetConfig+0xc8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d109      	bne.n	8003ce0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	029b      	lsls	r3, r3, #10
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40013400 	.word	0x40013400
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800

08003d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f023 030a 	bic.w	r3, r3, #10
 8003d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b087      	sub	sp, #28
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f023 0210 	bic.w	r2, r3, #16
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	031b      	lsls	r3, r3, #12
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003db6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f043 0307 	orr.w	r3, r3, #7
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	021a      	lsls	r2, r3, #8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	609a      	str	r2, [r3, #8]
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2201      	movs	r2, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a1a      	ldr	r2, [r3, #32]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	401a      	ands	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1a      	ldr	r2, [r3, #32]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e068      	b.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2e      	ldr	r2, [pc, #184]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2d      	ldr	r2, [pc, #180]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d108      	bne.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003eee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01d      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f26:	d018      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1a      	ldr	r2, [pc, #104]	; (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00e      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a13      	ldr	r2, [pc, #76]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d10c      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40013400 	.word	0x40013400
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800
 8003fa4:	40000c00 	.word	0x40000c00
 8003fa8:	40014000 	.word	0x40014000

08003fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e065      	b.n	8004094 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	041b      	lsls	r3, r3, #16
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d004      	beq.n	8004056 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d115      	bne.n	8004082 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	051b      	lsls	r3, r3, #20
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40013400 	.word	0x40013400

080040a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e040      	b.n	800413c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fc fcec 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2224      	movs	r2, #36	; 0x24
 80040d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 ff14 	bl	8004f1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fc59 	bl	80049ac <UART_SetConfig>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e01b      	b.n	800413c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 ff93 	bl	8005060 <UART_CheckIdleState>
 800413a:	4603      	mov	r3, r0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	; 0x28
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004158:	2b20      	cmp	r3, #32
 800415a:	d178      	bne.n	800424e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <HAL_UART_Transmit+0x24>
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e071      	b.n	8004250 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2221      	movs	r2, #33	; 0x21
 8004178:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800417a:	f7fc fed1 	bl	8000f20 <HAL_GetTick>
 800417e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	88fa      	ldrh	r2, [r7, #6]
 8004184:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004198:	d108      	bne.n	80041ac <HAL_UART_Transmit+0x68>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d104      	bne.n	80041ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	e003      	b.n	80041b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041b4:	e030      	b.n	8004218 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2200      	movs	r2, #0
 80041be:	2180      	movs	r1, #128	; 0x80
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fff5 	bl	80051b0 <UART_WaitOnFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d004      	beq.n	80041d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e03c      	b.n	8004250 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10b      	bne.n	80041f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	881a      	ldrh	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e8:	b292      	uxth	r2, r2
 80041ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	3302      	adds	r3, #2
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	e008      	b.n	8004206 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	781a      	ldrb	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	b292      	uxth	r2, r2
 80041fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	3301      	adds	r3, #1
 8004204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1c8      	bne.n	80041b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2200      	movs	r2, #0
 800422c:	2140      	movs	r1, #64	; 0x40
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 ffbe 	bl	80051b0 <UART_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e005      	b.n	8004250 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e000      	b.n	8004250 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800424e:	2302      	movs	r3, #2
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004258:	b480      	push	{r7}
 800425a:	b08b      	sub	sp, #44	; 0x2c
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800426a:	2b20      	cmp	r3, #32
 800426c:	d147      	bne.n	80042fe <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_UART_Transmit_IT+0x22>
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e040      	b.n	8004300 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	88fa      	ldrh	r2, [r7, #6]
 8004288:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	88fa      	ldrh	r2, [r7, #6]
 8004290:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2221      	movs	r2, #33	; 0x21
 80042a6:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b0:	d107      	bne.n	80042c2 <HAL_UART_Transmit_IT+0x6a>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a13      	ldr	r2, [pc, #76]	; (800430c <HAL_UART_Transmit_IT+0xb4>)
 80042be:	66da      	str	r2, [r3, #108]	; 0x6c
 80042c0:	e002      	b.n	80042c8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a12      	ldr	r2, [pc, #72]	; (8004310 <HAL_UART_Transmit_IT+0xb8>)
 80042c6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	613b      	str	r3, [r7, #16]
   return(result);
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	69f9      	ldr	r1, [r7, #28]
 80042ec:	6a3a      	ldr	r2, [r7, #32]
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e6      	bne.n	80042c8 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	372c      	adds	r7, #44	; 0x2c
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	080055b9 	.word	0x080055b9
 8004310:	08005501 	.word	0x08005501

08004314 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004328:	2b20      	cmp	r3, #32
 800432a:	d137      	bne.n	800439c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_UART_Receive_IT+0x24>
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e030      	b.n	800439e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <HAL_UART_Receive_IT+0x94>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01f      	beq.n	800438c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d018      	beq.n	800438c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	613b      	str	r3, [r7, #16]
   return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	623b      	str	r3, [r7, #32]
 800437a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69f9      	ldr	r1, [r7, #28]
 800437e:	6a3a      	ldr	r2, [r7, #32]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	61bb      	str	r3, [r7, #24]
   return(result);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	461a      	mov	r2, r3
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 ff74 	bl	8005280 <UART_Start_Receive_IT>
 8004398:	4603      	mov	r3, r0
 800439a:	e000      	b.n	800439e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3728      	adds	r7, #40	; 0x28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40008000 	.word	0x40008000

080043ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b0ba      	sub	sp, #232	; 0xe8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80043d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80043da:	4013      	ands	r3, r2
 80043dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80043e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d115      	bne.n	8004414 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80043e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00f      	beq.n	8004414 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d009      	beq.n	8004414 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 82ae 	beq.w	8004966 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
      }
      return;
 8004412:	e2a8      	b.n	8004966 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8117 	beq.w	800464c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800441e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800442a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800442e:	4b85      	ldr	r3, [pc, #532]	; (8004644 <HAL_UART_IRQHandler+0x298>)
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 810a 	beq.w	800464c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d011      	beq.n	8004468 <HAL_UART_IRQHandler+0xbc>
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00b      	beq.n	8004468 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2201      	movs	r2, #1
 8004456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d011      	beq.n	8004498 <HAL_UART_IRQHandler+0xec>
 8004474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2202      	movs	r2, #2
 8004486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448e:	f043 0204 	orr.w	r2, r3, #4
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d011      	beq.n	80044c8 <HAL_UART_IRQHandler+0x11c>
 80044a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00b      	beq.n	80044c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2204      	movs	r2, #4
 80044b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044be:	f043 0202 	orr.w	r2, r3, #2
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d017      	beq.n	8004504 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d105      	bne.n	80044ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80044e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00b      	beq.n	8004504 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2208      	movs	r2, #8
 80044f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fa:	f043 0208 	orr.w	r2, r3, #8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450c:	2b00      	cmp	r3, #0
 800450e:	d012      	beq.n	8004536 <HAL_UART_IRQHandler+0x18a>
 8004510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00c      	beq.n	8004536 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8214 	beq.w	800496a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800454e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b40      	cmp	r3, #64	; 0x40
 8004580:	d005      	beq.n	800458e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004586:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800458a:	2b00      	cmp	r3, #0
 800458c:	d04f      	beq.n	800462e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 ff3c 	bl	800540c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	d141      	bne.n	8004626 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3308      	adds	r3, #8
 80045a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3308      	adds	r3, #8
 80045ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1d9      	bne.n	80045a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d013      	beq.n	800461e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fa:	4a13      	ldr	r2, [pc, #76]	; (8004648 <HAL_UART_IRQHandler+0x29c>)
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004602:	4618      	mov	r0, r3
 8004604:	f7fc fec4 	bl	8001390 <HAL_DMA_Abort_IT>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d017      	beq.n	800463e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004618:	4610      	mov	r0, r2
 800461a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461c:	e00f      	b.n	800463e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f9ae 	bl	8004980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004624:	e00b      	b.n	800463e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f9aa 	bl	8004980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462c:	e007      	b.n	800463e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f9a6 	bl	8004980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800463c:	e195      	b.n	800496a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800463e:	bf00      	nop
    return;
 8004640:	e193      	b.n	800496a <HAL_UART_IRQHandler+0x5be>
 8004642:	bf00      	nop
 8004644:	04000120 	.word	0x04000120
 8004648:	080054d5 	.word	0x080054d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004650:	2b01      	cmp	r3, #1
 8004652:	f040 814e 	bne.w	80048f2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 8147 	beq.w	80048f2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004668:	f003 0310 	and.w	r3, r3, #16
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8140 	beq.w	80048f2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2210      	movs	r2, #16
 8004678:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	f040 80b8 	bne.w	80047fa <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004696:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 8167 	beq.w	800496e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046aa:	429a      	cmp	r2, r3
 80046ac:	f080 815f 	bcs.w	800496e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 8086 	bne.w	80047d8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004702:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800470e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1da      	bne.n	80046cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3308      	adds	r3, #8
 800471c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3308      	adds	r3, #8
 8004736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800473a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800473e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004742:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800474c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e1      	bne.n	8004716 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3308      	adds	r3, #8
 8004758:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3308      	adds	r3, #8
 8004772:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004776:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004778:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800477c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e3      	bne.n	8004752 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a8:	f023 0310 	bic.w	r3, r3, #16
 80047ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80047bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e4      	bne.n	8004798 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fc fd9e 	bl	8001314 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f8ce 	bl	8004994 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047f8:	e0b9      	b.n	800496e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004806:	b29b      	uxth	r3, r3
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80ab 	beq.w	8004972 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800481c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80a6 	beq.w	8004972 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004836:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800483a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004848:	647b      	str	r3, [r7, #68]	; 0x44
 800484a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800484e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e4      	bne.n	8004826 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3308      	adds	r3, #8
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	623b      	str	r3, [r7, #32]
   return(result);
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004880:	633a      	str	r2, [r7, #48]	; 0x30
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e3      	bne.n	800485c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f023 0310 	bic.w	r3, r3, #16
 80048bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	69b9      	ldr	r1, [r7, #24]
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	617b      	str	r3, [r7, #20]
   return(result);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e4      	bne.n	80048a8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048e8:	4619      	mov	r1, r3
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f852 	bl	8004994 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048f0:	e03f      	b.n	8004972 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00e      	beq.n	800491c <HAL_UART_IRQHandler+0x570>
 80048fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d008      	beq.n	800491c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004912:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f001 f895 	bl	8005a44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800491a:	e02d      	b.n	8004978 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800491c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00e      	beq.n	8004946 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01c      	beq.n	8004976 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	4798      	blx	r3
    }
    return;
 8004944:	e017      	b.n	8004976 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d012      	beq.n	8004978 <HAL_UART_IRQHandler+0x5cc>
 8004952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fe8a 	bl	8005678 <UART_EndTransmit_IT>
    return;
 8004964:	e008      	b.n	8004978 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004966:	bf00      	nop
 8004968:	e006      	b.n	8004978 <HAL_UART_IRQHandler+0x5cc>
    return;
 800496a:	bf00      	nop
 800496c:	e004      	b.n	8004978 <HAL_UART_IRQHandler+0x5cc>
      return;
 800496e:	bf00      	nop
 8004970:	e002      	b.n	8004978 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004972:	bf00      	nop
 8004974:	e000      	b.n	8004978 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004976:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004978:	37e8      	adds	r7, #232	; 0xe8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop

08004980 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b0:	b08a      	sub	sp, #40	; 0x28
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4ba4      	ldr	r3, [pc, #656]	; (8004c6c <UART_SetConfig+0x2c0>)
 80049dc:	4013      	ands	r3, r2
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049e4:	430b      	orrs	r3, r1
 80049e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a99      	ldr	r2, [pc, #612]	; (8004c70 <UART_SetConfig+0x2c4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d004      	beq.n	8004a18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a14:	4313      	orrs	r3, r2
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a90      	ldr	r2, [pc, #576]	; (8004c74 <UART_SetConfig+0x2c8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d126      	bne.n	8004a84 <UART_SetConfig+0xd8>
 8004a36:	4b90      	ldr	r3, [pc, #576]	; (8004c78 <UART_SetConfig+0x2cc>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d81b      	bhi.n	8004a7c <UART_SetConfig+0xd0>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <UART_SetConfig+0xa0>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a5d 	.word	0x08004a5d
 8004a50:	08004a6d 	.word	0x08004a6d
 8004a54:	08004a65 	.word	0x08004a65
 8004a58:	08004a75 	.word	0x08004a75
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a62:	e116      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004a64:	2302      	movs	r3, #2
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6a:	e112      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e10e      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004a74:	2308      	movs	r3, #8
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e10a      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a82:	e106      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a7c      	ldr	r2, [pc, #496]	; (8004c7c <UART_SetConfig+0x2d0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d138      	bne.n	8004b00 <UART_SetConfig+0x154>
 8004a8e:	4b7a      	ldr	r3, [pc, #488]	; (8004c78 <UART_SetConfig+0x2cc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f003 030c 	and.w	r3, r3, #12
 8004a98:	2b0c      	cmp	r3, #12
 8004a9a:	d82d      	bhi.n	8004af8 <UART_SetConfig+0x14c>
 8004a9c:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <UART_SetConfig+0xf8>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004ad9 	.word	0x08004ad9
 8004aa8:	08004af9 	.word	0x08004af9
 8004aac:	08004af9 	.word	0x08004af9
 8004ab0:	08004af9 	.word	0x08004af9
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004af9 	.word	0x08004af9
 8004abc:	08004af9 	.word	0x08004af9
 8004ac0:	08004af9 	.word	0x08004af9
 8004ac4:	08004ae1 	.word	0x08004ae1
 8004ac8:	08004af9 	.word	0x08004af9
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	08004af9 	.word	0x08004af9
 8004ad4:	08004af1 	.word	0x08004af1
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ade:	e0d8      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae6:	e0d4      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aee:	e0d0      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af6:	e0cc      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afe:	e0c8      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a5e      	ldr	r2, [pc, #376]	; (8004c80 <UART_SetConfig+0x2d4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d125      	bne.n	8004b56 <UART_SetConfig+0x1aa>
 8004b0a:	4b5b      	ldr	r3, [pc, #364]	; (8004c78 <UART_SetConfig+0x2cc>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b14:	2b30      	cmp	r3, #48	; 0x30
 8004b16:	d016      	beq.n	8004b46 <UART_SetConfig+0x19a>
 8004b18:	2b30      	cmp	r3, #48	; 0x30
 8004b1a:	d818      	bhi.n	8004b4e <UART_SetConfig+0x1a2>
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d00a      	beq.n	8004b36 <UART_SetConfig+0x18a>
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d814      	bhi.n	8004b4e <UART_SetConfig+0x1a2>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <UART_SetConfig+0x182>
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d008      	beq.n	8004b3e <UART_SetConfig+0x192>
 8004b2c:	e00f      	b.n	8004b4e <UART_SetConfig+0x1a2>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b34:	e0ad      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004b36:	2302      	movs	r3, #2
 8004b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3c:	e0a9      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004b3e:	2304      	movs	r3, #4
 8004b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b44:	e0a5      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004b46:	2308      	movs	r3, #8
 8004b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4c:	e0a1      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004b4e:	2310      	movs	r3, #16
 8004b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b54:	e09d      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a4a      	ldr	r2, [pc, #296]	; (8004c84 <UART_SetConfig+0x2d8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d125      	bne.n	8004bac <UART_SetConfig+0x200>
 8004b60:	4b45      	ldr	r3, [pc, #276]	; (8004c78 <UART_SetConfig+0x2cc>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b6c:	d016      	beq.n	8004b9c <UART_SetConfig+0x1f0>
 8004b6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b70:	d818      	bhi.n	8004ba4 <UART_SetConfig+0x1f8>
 8004b72:	2b80      	cmp	r3, #128	; 0x80
 8004b74:	d00a      	beq.n	8004b8c <UART_SetConfig+0x1e0>
 8004b76:	2b80      	cmp	r3, #128	; 0x80
 8004b78:	d814      	bhi.n	8004ba4 <UART_SetConfig+0x1f8>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <UART_SetConfig+0x1d8>
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d008      	beq.n	8004b94 <UART_SetConfig+0x1e8>
 8004b82:	e00f      	b.n	8004ba4 <UART_SetConfig+0x1f8>
 8004b84:	2300      	movs	r3, #0
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8a:	e082      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b92:	e07e      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004b94:	2304      	movs	r3, #4
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9a:	e07a      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e076      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e072      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a35      	ldr	r2, [pc, #212]	; (8004c88 <UART_SetConfig+0x2dc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d12a      	bne.n	8004c0c <UART_SetConfig+0x260>
 8004bb6:	4b30      	ldr	r3, [pc, #192]	; (8004c78 <UART_SetConfig+0x2cc>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc4:	d01a      	beq.n	8004bfc <UART_SetConfig+0x250>
 8004bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bca:	d81b      	bhi.n	8004c04 <UART_SetConfig+0x258>
 8004bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd0:	d00c      	beq.n	8004bec <UART_SetConfig+0x240>
 8004bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd6:	d815      	bhi.n	8004c04 <UART_SetConfig+0x258>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <UART_SetConfig+0x238>
 8004bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be0:	d008      	beq.n	8004bf4 <UART_SetConfig+0x248>
 8004be2:	e00f      	b.n	8004c04 <UART_SetConfig+0x258>
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bea:	e052      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004bec:	2302      	movs	r3, #2
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e04e      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e04a      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e046      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004c04:	2310      	movs	r3, #16
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0a:	e042      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a17      	ldr	r2, [pc, #92]	; (8004c70 <UART_SetConfig+0x2c4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d13a      	bne.n	8004c8c <UART_SetConfig+0x2e0>
 8004c16:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <UART_SetConfig+0x2cc>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c24:	d01a      	beq.n	8004c5c <UART_SetConfig+0x2b0>
 8004c26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c2a:	d81b      	bhi.n	8004c64 <UART_SetConfig+0x2b8>
 8004c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c30:	d00c      	beq.n	8004c4c <UART_SetConfig+0x2a0>
 8004c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c36:	d815      	bhi.n	8004c64 <UART_SetConfig+0x2b8>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <UART_SetConfig+0x298>
 8004c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c40:	d008      	beq.n	8004c54 <UART_SetConfig+0x2a8>
 8004c42:	e00f      	b.n	8004c64 <UART_SetConfig+0x2b8>
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4a:	e022      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	e01e      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004c54:	2304      	movs	r3, #4
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5a:	e01a      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c62:	e016      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004c64:	2310      	movs	r3, #16
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6a:	e012      	b.n	8004c92 <UART_SetConfig+0x2e6>
 8004c6c:	efff69f3 	.word	0xefff69f3
 8004c70:	40008000 	.word	0x40008000
 8004c74:	40013800 	.word	0x40013800
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40004400 	.word	0x40004400
 8004c80:	40004800 	.word	0x40004800
 8004c84:	40004c00 	.word	0x40004c00
 8004c88:	40005000 	.word	0x40005000
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a9f      	ldr	r2, [pc, #636]	; (8004f14 <UART_SetConfig+0x568>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d17a      	bne.n	8004d92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d824      	bhi.n	8004cee <UART_SetConfig+0x342>
 8004ca4:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0x300>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cef 	.word	0x08004cef
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004cef 	.word	0x08004cef
 8004cbc:	08004cdf 	.word	0x08004cdf
 8004cc0:	08004cef 	.word	0x08004cef
 8004cc4:	08004cef 	.word	0x08004cef
 8004cc8:	08004cef 	.word	0x08004cef
 8004ccc:	08004ce7 	.word	0x08004ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd0:	f7fd fbd0 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8004cd4:	61f8      	str	r0, [r7, #28]
        break;
 8004cd6:	e010      	b.n	8004cfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd8:	4b8f      	ldr	r3, [pc, #572]	; (8004f18 <UART_SetConfig+0x56c>)
 8004cda:	61fb      	str	r3, [r7, #28]
        break;
 8004cdc:	e00d      	b.n	8004cfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cde:	f7fd fb31 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8004ce2:	61f8      	str	r0, [r7, #28]
        break;
 8004ce4:	e009      	b.n	8004cfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cea:	61fb      	str	r3, [r7, #28]
        break;
 8004cec:	e005      	b.n	8004cfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80fb 	beq.w	8004ef8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d305      	bcc.n	8004d1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d903      	bls.n	8004d26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d24:	e0e8      	b.n	8004ef8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	461c      	mov	r4, r3
 8004d2c:	4615      	mov	r5, r2
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	022b      	lsls	r3, r5, #8
 8004d38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d3c:	0222      	lsls	r2, r4, #8
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	6849      	ldr	r1, [r1, #4]
 8004d42:	0849      	lsrs	r1, r1, #1
 8004d44:	2000      	movs	r0, #0
 8004d46:	4688      	mov	r8, r1
 8004d48:	4681      	mov	r9, r0
 8004d4a:	eb12 0a08 	adds.w	sl, r2, r8
 8004d4e:	eb43 0b09 	adc.w	fp, r3, r9
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	603b      	str	r3, [r7, #0]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d60:	4650      	mov	r0, sl
 8004d62:	4659      	mov	r1, fp
 8004d64:	f7fb fa84 	bl	8000270 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d76:	d308      	bcc.n	8004d8a <UART_SetConfig+0x3de>
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7e:	d204      	bcs.n	8004d8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	60da      	str	r2, [r3, #12]
 8004d88:	e0b6      	b.n	8004ef8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d90:	e0b2      	b.n	8004ef8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9a:	d15e      	bne.n	8004e5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d828      	bhi.n	8004df6 <UART_SetConfig+0x44a>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <UART_SetConfig+0x400>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	08004dd9 	.word	0x08004dd9
 8004db4:	08004de1 	.word	0x08004de1
 8004db8:	08004df7 	.word	0x08004df7
 8004dbc:	08004de7 	.word	0x08004de7
 8004dc0:	08004df7 	.word	0x08004df7
 8004dc4:	08004df7 	.word	0x08004df7
 8004dc8:	08004df7 	.word	0x08004df7
 8004dcc:	08004def 	.word	0x08004def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd0:	f7fd fb50 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8004dd4:	61f8      	str	r0, [r7, #28]
        break;
 8004dd6:	e014      	b.n	8004e02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd8:	f7fd fb62 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8004ddc:	61f8      	str	r0, [r7, #28]
        break;
 8004dde:	e010      	b.n	8004e02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de0:	4b4d      	ldr	r3, [pc, #308]	; (8004f18 <UART_SetConfig+0x56c>)
 8004de2:	61fb      	str	r3, [r7, #28]
        break;
 8004de4:	e00d      	b.n	8004e02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de6:	f7fd faad 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8004dea:	61f8      	str	r0, [r7, #28]
        break;
 8004dec:	e009      	b.n	8004e02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df2:	61fb      	str	r3, [r7, #28]
        break;
 8004df4:	e005      	b.n	8004e02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d077      	beq.n	8004ef8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	005a      	lsls	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b0f      	cmp	r3, #15
 8004e22:	d916      	bls.n	8004e52 <UART_SetConfig+0x4a6>
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2a:	d212      	bcs.n	8004e52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f023 030f 	bic.w	r3, r3, #15
 8004e34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	8afb      	ldrh	r3, [r7, #22]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	8afa      	ldrh	r2, [r7, #22]
 8004e4e:	60da      	str	r2, [r3, #12]
 8004e50:	e052      	b.n	8004ef8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e58:	e04e      	b.n	8004ef8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d827      	bhi.n	8004eb2 <UART_SetConfig+0x506>
 8004e62:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <UART_SetConfig+0x4bc>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004e95 	.word	0x08004e95
 8004e70:	08004e9d 	.word	0x08004e9d
 8004e74:	08004eb3 	.word	0x08004eb3
 8004e78:	08004ea3 	.word	0x08004ea3
 8004e7c:	08004eb3 	.word	0x08004eb3
 8004e80:	08004eb3 	.word	0x08004eb3
 8004e84:	08004eb3 	.word	0x08004eb3
 8004e88:	08004eab 	.word	0x08004eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e8c:	f7fd faf2 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8004e90:	61f8      	str	r0, [r7, #28]
        break;
 8004e92:	e014      	b.n	8004ebe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e94:	f7fd fb04 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8004e98:	61f8      	str	r0, [r7, #28]
        break;
 8004e9a:	e010      	b.n	8004ebe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <UART_SetConfig+0x56c>)
 8004e9e:	61fb      	str	r3, [r7, #28]
        break;
 8004ea0:	e00d      	b.n	8004ebe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea2:	f7fd fa4f 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8004ea6:	61f8      	str	r0, [r7, #28]
        break;
 8004ea8:	e009      	b.n	8004ebe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eae:	61fb      	str	r3, [r7, #28]
        break;
 8004eb0:	e005      	b.n	8004ebe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ebc:	bf00      	nop
    }

    if (pclk != 0U)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d019      	beq.n	8004ef8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	085a      	lsrs	r2, r3, #1
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	441a      	add	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b0f      	cmp	r3, #15
 8004edc:	d909      	bls.n	8004ef2 <UART_SetConfig+0x546>
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee4:	d205      	bcs.n	8004ef2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60da      	str	r2, [r3, #12]
 8004ef0:	e002      	b.n	8004ef8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3728      	adds	r7, #40	; 0x28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f12:	bf00      	nop
 8004f14:	40008000 	.word	0x40008000
 8004f18:	00f42400 	.word	0x00f42400

08004f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01a      	beq.n	8005032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800501a:	d10a      	bne.n	8005032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b098      	sub	sp, #96	; 0x60
 8005064:	af02      	add	r7, sp, #8
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005070:	f7fb ff56 	bl	8000f20 <HAL_GetTick>
 8005074:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b08      	cmp	r3, #8
 8005082:	d12e      	bne.n	80050e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800508c:	2200      	movs	r2, #0
 800508e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f88c 	bl	80051b0 <UART_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d021      	beq.n	80050e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b2:	653b      	str	r3, [r7, #80]	; 0x50
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050bc:	647b      	str	r3, [r7, #68]	; 0x44
 80050be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e6      	bne.n	800509e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e062      	b.n	80051a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d149      	bne.n	8005184 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050f8:	2200      	movs	r2, #0
 80050fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f856 	bl	80051b0 <UART_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d03c      	beq.n	8005184 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	623b      	str	r3, [r7, #32]
   return(result);
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800511e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005128:	633b      	str	r3, [r7, #48]	; 0x30
 800512a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800512e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e6      	bne.n	800510a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3308      	adds	r3, #8
 8005142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	60fb      	str	r3, [r7, #12]
   return(result);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	64bb      	str	r3, [r7, #72]	; 0x48
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800515c:	61fa      	str	r2, [r7, #28]
 800515e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	69b9      	ldr	r1, [r7, #24]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	617b      	str	r3, [r7, #20]
   return(result);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e5      	bne.n	800513c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e011      	b.n	80051a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3758      	adds	r7, #88	; 0x58
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c0:	e049      	b.n	8005256 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d045      	beq.n	8005256 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ca:	f7fb fea9 	bl	8000f20 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d302      	bcc.n	80051e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e048      	b.n	8005276 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d031      	beq.n	8005256 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d110      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2208      	movs	r2, #8
 8005206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f8ff 	bl	800540c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2208      	movs	r2, #8
 8005212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e029      	b.n	8005276 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005230:	d111      	bne.n	8005256 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800523a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f8e5 	bl	800540c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e00f      	b.n	8005276 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4013      	ands	r3, r2
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	bf0c      	ite	eq
 8005266:	2301      	moveq	r3, #1
 8005268:	2300      	movne	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	429a      	cmp	r2, r3
 8005272:	d0a6      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005280:	b480      	push	{r7}
 8005282:	b097      	sub	sp, #92	; 0x5c
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	88fa      	ldrh	r2, [r7, #6]
 8005298:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b2:	d10e      	bne.n	80052d2 <UART_Start_Receive_IT+0x52>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <UART_Start_Receive_IT+0x48>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80052c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052c6:	e02d      	b.n	8005324 <UART_Start_Receive_IT+0xa4>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	22ff      	movs	r2, #255	; 0xff
 80052cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052d0:	e028      	b.n	8005324 <UART_Start_Receive_IT+0xa4>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10d      	bne.n	80052f6 <UART_Start_Receive_IT+0x76>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d104      	bne.n	80052ec <UART_Start_Receive_IT+0x6c>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	22ff      	movs	r2, #255	; 0xff
 80052e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052ea:	e01b      	b.n	8005324 <UART_Start_Receive_IT+0xa4>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	227f      	movs	r2, #127	; 0x7f
 80052f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052f4:	e016      	b.n	8005324 <UART_Start_Receive_IT+0xa4>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052fe:	d10d      	bne.n	800531c <UART_Start_Receive_IT+0x9c>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <UART_Start_Receive_IT+0x92>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	227f      	movs	r2, #127	; 0x7f
 800530c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005310:	e008      	b.n	8005324 <UART_Start_Receive_IT+0xa4>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	223f      	movs	r2, #63	; 0x3f
 8005316:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800531a:	e003      	b.n	8005324 <UART_Start_Receive_IT+0xa4>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2222      	movs	r2, #34	; 0x22
 8005330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	657b      	str	r3, [r7, #84]	; 0x54
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005354:	64ba      	str	r2, [r7, #72]	; 0x48
 8005356:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800535a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005370:	d107      	bne.n	8005382 <UART_Start_Receive_IT+0x102>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4a21      	ldr	r2, [pc, #132]	; (8005404 <UART_Start_Receive_IT+0x184>)
 800537e:	669a      	str	r2, [r3, #104]	; 0x68
 8005380:	e002      	b.n	8005388 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4a20      	ldr	r2, [pc, #128]	; (8005408 <UART_Start_Receive_IT+0x188>)
 8005386:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d019      	beq.n	80053c4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80053a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
 80053b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e6      	bne.n	8005390 <UART_Start_Receive_IT+0x110>
 80053c2:	e018      	b.n	80053f6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	613b      	str	r3, [r7, #16]
   return(result);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f043 0320 	orr.w	r3, r3, #32
 80053d8:	653b      	str	r3, [r7, #80]	; 0x50
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e2:	623b      	str	r3, [r7, #32]
 80053e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	69f9      	ldr	r1, [r7, #28]
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e6      	bne.n	80053c4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	375c      	adds	r7, #92	; 0x5c
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	08005889 	.word	0x08005889
 8005408:	080056cd 	.word	0x080056cd

0800540c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b095      	sub	sp, #84	; 0x54
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005432:	643b      	str	r3, [r7, #64]	; 0x40
 8005434:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e6      	bne.n	8005414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3308      	adds	r3, #8
 800544c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	61fb      	str	r3, [r7, #28]
   return(result);
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	64bb      	str	r3, [r7, #72]	; 0x48
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800546c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e5      	bne.n	8005446 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547e:	2b01      	cmp	r3, #1
 8005480:	d118      	bne.n	80054b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f023 0310 	bic.w	r3, r3, #16
 8005496:	647b      	str	r3, [r7, #68]	; 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6979      	ldr	r1, [r7, #20]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	613b      	str	r3, [r7, #16]
   return(result);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e6      	bne.n	8005482 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054c8:	bf00      	nop
 80054ca:	3754      	adds	r7, #84	; 0x54
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7ff fa44 	bl	8004980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005500:	b480      	push	{r7}
 8005502:	b08f      	sub	sp, #60	; 0x3c
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550c:	2b21      	cmp	r3, #33	; 0x21
 800550e:	d14d      	bne.n	80055ac <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d132      	bne.n	8005582 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	e853 3f00 	ldrex	r3, [r3]
 8005528:	61fb      	str	r3, [r7, #28]
   return(result);
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800553c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005542:	e841 2300 	strex	r3, r2, [r1]
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1e6      	bne.n	800551c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	e853 3f00 	ldrex	r3, [r3]
 800555a:	60bb      	str	r3, [r7, #8]
   return(result);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005562:	633b      	str	r3, [r7, #48]	; 0x30
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	6979      	ldr	r1, [r7, #20]
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	613b      	str	r3, [r7, #16]
   return(result);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e6      	bne.n	800554e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005580:	e014      	b.n	80055ac <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	b292      	uxth	r2, r2
 800558e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80055ac:	bf00      	nop
 80055ae:	373c      	adds	r7, #60	; 0x3c
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b091      	sub	sp, #68	; 0x44
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c4:	2b21      	cmp	r3, #33	; 0x21
 80055c6:	d151      	bne.n	800566c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d132      	bne.n	800563a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	623b      	str	r3, [r7, #32]
   return(result);
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30
 80055f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	60fb      	str	r3, [r7, #12]
   return(result);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	69b9      	ldr	r1, [r7, #24]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	617b      	str	r3, [r7, #20]
   return(result);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e6      	bne.n	8005606 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005638:	e018      	b.n	800566c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005642:	881a      	ldrh	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800564c:	b292      	uxth	r2, r2
 800564e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005654:	1c9a      	adds	r2, r3, #2
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800566c:	bf00      	nop
 800566e:	3744      	adds	r7, #68	; 0x44
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	60bb      	str	r3, [r7, #8]
   return(result);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005694:	61fb      	str	r3, [r7, #28]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6979      	ldr	r1, [r7, #20]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	613b      	str	r3, [r7, #16]
   return(result);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e6      	bne.n	8005680 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fa ff8a 	bl	80005d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056c4:	bf00      	nop
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b09c      	sub	sp, #112	; 0x70
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e4:	2b22      	cmp	r3, #34	; 0x22
 80056e6:	f040 80be 	bne.w	8005866 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80056f8:	b2d9      	uxtb	r1, r3
 80056fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005704:	400a      	ands	r2, r1
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	f040 80a3 	bne.w	800587a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005748:	66bb      	str	r3, [r7, #104]	; 0x68
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005752:	65bb      	str	r3, [r7, #88]	; 0x58
 8005754:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e6      	bne.n	8005734 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3308      	adds	r3, #8
 800576c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	667b      	str	r3, [r7, #100]	; 0x64
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3308      	adds	r3, #8
 8005784:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005786:	647a      	str	r2, [r7, #68]	; 0x44
 8005788:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800578c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e5      	bne.n	8005766 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a34      	ldr	r2, [pc, #208]	; (8005884 <UART_RxISR_8BIT+0x1b8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d01f      	beq.n	80057f8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d018      	beq.n	80057f8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	623b      	str	r3, [r7, #32]
   return(result);
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057da:	663b      	str	r3, [r7, #96]	; 0x60
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30
 80057e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e6      	bne.n	80057c6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d12e      	bne.n	800585e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	60fb      	str	r3, [r7, #12]
   return(result);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0310 	bic.w	r3, r3, #16
 800581a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	69b9      	ldr	r1, [r7, #24]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	617b      	str	r3, [r7, #20]
   return(result);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e6      	bne.n	8005806 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b10      	cmp	r3, #16
 8005844:	d103      	bne.n	800584e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2210      	movs	r2, #16
 800584c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff f89c 	bl	8004994 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800585c:	e00d      	b.n	800587a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fa fea2 	bl	80005a8 <HAL_UART_RxCpltCallback>
}
 8005864:	e009      	b.n	800587a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	8b1b      	ldrh	r3, [r3, #24]
 800586c:	b29a      	uxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0208 	orr.w	r2, r2, #8
 8005876:	b292      	uxth	r2, r2
 8005878:	831a      	strh	r2, [r3, #24]
}
 800587a:	bf00      	nop
 800587c:	3770      	adds	r7, #112	; 0x70
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40008000 	.word	0x40008000

08005888 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b09c      	sub	sp, #112	; 0x70
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005896:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a0:	2b22      	cmp	r3, #34	; 0x22
 80058a2:	f040 80be 	bne.w	8005a22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80058b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80058ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80058be:	4013      	ands	r3, r2
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ca:	1c9a      	adds	r2, r3, #2
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f040 80a3 	bne.w	8005a36 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80058fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005904:	667b      	str	r3, [r7, #100]	; 0x64
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800590e:	657b      	str	r3, [r7, #84]	; 0x54
 8005910:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800591c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e6      	bne.n	80058f0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	663b      	str	r3, [r7, #96]	; 0x60
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3308      	adds	r3, #8
 8005940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005942:	643a      	str	r2, [r7, #64]	; 0x40
 8005944:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e5      	bne.n	8005922 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a34      	ldr	r2, [pc, #208]	; (8005a40 <UART_RxISR_16BIT+0x1b8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01f      	beq.n	80059b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d018      	beq.n	80059b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e6      	bne.n	8005982 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d12e      	bne.n	8005a1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f023 0310 	bic.w	r3, r3, #16
 80059d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6979      	ldr	r1, [r7, #20]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	613b      	str	r3, [r7, #16]
   return(result);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e6      	bne.n	80059c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	d103      	bne.n	8005a0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2210      	movs	r2, #16
 8005a08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fe ffbe 	bl	8004994 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a18:	e00d      	b.n	8005a36 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fa fdc4 	bl	80005a8 <HAL_UART_RxCpltCallback>
}
 8005a20:	e009      	b.n	8005a36 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	8b1b      	ldrh	r3, [r3, #24]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0208 	orr.w	r2, r2, #8
 8005a32:	b292      	uxth	r2, r2
 8005a34:	831a      	strh	r2, [r3, #24]
}
 8005a36:	bf00      	nop
 8005a38:	3770      	adds	r7, #112	; 0x70
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40008000 	.word	0x40008000

08005a44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <std>:
 8005a58:	2300      	movs	r3, #0
 8005a5a:	b510      	push	{r4, lr}
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a66:	6083      	str	r3, [r0, #8]
 8005a68:	8181      	strh	r1, [r0, #12]
 8005a6a:	6643      	str	r3, [r0, #100]	; 0x64
 8005a6c:	81c2      	strh	r2, [r0, #14]
 8005a6e:	6183      	str	r3, [r0, #24]
 8005a70:	4619      	mov	r1, r3
 8005a72:	2208      	movs	r2, #8
 8005a74:	305c      	adds	r0, #92	; 0x5c
 8005a76:	f000 f8f4 	bl	8005c62 <memset>
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <std+0x38>)
 8005a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8005a7e:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <std+0x3c>)
 8005a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <std+0x40>)
 8005a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <std+0x44>)
 8005a88:	6224      	str	r4, [r4, #32]
 8005a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a8c:	bd10      	pop	{r4, pc}
 8005a8e:	bf00      	nop
 8005a90:	08005bdd 	.word	0x08005bdd
 8005a94:	08005bff 	.word	0x08005bff
 8005a98:	08005c37 	.word	0x08005c37
 8005a9c:	08005c5b 	.word	0x08005c5b

08005aa0 <stdio_exit_handler>:
 8005aa0:	4a02      	ldr	r2, [pc, #8]	; (8005aac <stdio_exit_handler+0xc>)
 8005aa2:	4903      	ldr	r1, [pc, #12]	; (8005ab0 <stdio_exit_handler+0x10>)
 8005aa4:	4803      	ldr	r0, [pc, #12]	; (8005ab4 <stdio_exit_handler+0x14>)
 8005aa6:	f000 b869 	b.w	8005b7c <_fwalk_sglue>
 8005aaa:	bf00      	nop
 8005aac:	2000000c 	.word	0x2000000c
 8005ab0:	080065fd 	.word	0x080065fd
 8005ab4:	20000018 	.word	0x20000018

08005ab8 <cleanup_stdio>:
 8005ab8:	6841      	ldr	r1, [r0, #4]
 8005aba:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <cleanup_stdio+0x34>)
 8005abc:	4299      	cmp	r1, r3
 8005abe:	b510      	push	{r4, lr}
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	d001      	beq.n	8005ac8 <cleanup_stdio+0x10>
 8005ac4:	f000 fd9a 	bl	80065fc <_fflush_r>
 8005ac8:	68a1      	ldr	r1, [r4, #8]
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <cleanup_stdio+0x38>)
 8005acc:	4299      	cmp	r1, r3
 8005ace:	d002      	beq.n	8005ad6 <cleanup_stdio+0x1e>
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 fd93 	bl	80065fc <_fflush_r>
 8005ad6:	68e1      	ldr	r1, [r4, #12]
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <cleanup_stdio+0x3c>)
 8005ada:	4299      	cmp	r1, r3
 8005adc:	d004      	beq.n	8005ae8 <cleanup_stdio+0x30>
 8005ade:	4620      	mov	r0, r4
 8005ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae4:	f000 bd8a 	b.w	80065fc <_fflush_r>
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	bf00      	nop
 8005aec:	200001f8 	.word	0x200001f8
 8005af0:	20000260 	.word	0x20000260
 8005af4:	200002c8 	.word	0x200002c8

08005af8 <global_stdio_init.part.0>:
 8005af8:	b510      	push	{r4, lr}
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <global_stdio_init.part.0+0x30>)
 8005afc:	4c0b      	ldr	r4, [pc, #44]	; (8005b2c <global_stdio_init.part.0+0x34>)
 8005afe:	4a0c      	ldr	r2, [pc, #48]	; (8005b30 <global_stdio_init.part.0+0x38>)
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	4620      	mov	r0, r4
 8005b04:	2200      	movs	r2, #0
 8005b06:	2104      	movs	r1, #4
 8005b08:	f7ff ffa6 	bl	8005a58 <std>
 8005b0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b10:	2201      	movs	r2, #1
 8005b12:	2109      	movs	r1, #9
 8005b14:	f7ff ffa0 	bl	8005a58 <std>
 8005b18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b22:	2112      	movs	r1, #18
 8005b24:	f7ff bf98 	b.w	8005a58 <std>
 8005b28:	20000330 	.word	0x20000330
 8005b2c:	200001f8 	.word	0x200001f8
 8005b30:	08005aa1 	.word	0x08005aa1

08005b34 <__sfp_lock_acquire>:
 8005b34:	4801      	ldr	r0, [pc, #4]	; (8005b3c <__sfp_lock_acquire+0x8>)
 8005b36:	f000 b90d 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005b3a:	bf00      	nop
 8005b3c:	20000339 	.word	0x20000339

08005b40 <__sfp_lock_release>:
 8005b40:	4801      	ldr	r0, [pc, #4]	; (8005b48 <__sfp_lock_release+0x8>)
 8005b42:	f000 b908 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005b46:	bf00      	nop
 8005b48:	20000339 	.word	0x20000339

08005b4c <__sinit>:
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	4604      	mov	r4, r0
 8005b50:	f7ff fff0 	bl	8005b34 <__sfp_lock_acquire>
 8005b54:	6a23      	ldr	r3, [r4, #32]
 8005b56:	b11b      	cbz	r3, 8005b60 <__sinit+0x14>
 8005b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b5c:	f7ff bff0 	b.w	8005b40 <__sfp_lock_release>
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <__sinit+0x28>)
 8005b62:	6223      	str	r3, [r4, #32]
 8005b64:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <__sinit+0x2c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f5      	bne.n	8005b58 <__sinit+0xc>
 8005b6c:	f7ff ffc4 	bl	8005af8 <global_stdio_init.part.0>
 8005b70:	e7f2      	b.n	8005b58 <__sinit+0xc>
 8005b72:	bf00      	nop
 8005b74:	08005ab9 	.word	0x08005ab9
 8005b78:	20000330 	.word	0x20000330

08005b7c <_fwalk_sglue>:
 8005b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b80:	4607      	mov	r7, r0
 8005b82:	4688      	mov	r8, r1
 8005b84:	4614      	mov	r4, r2
 8005b86:	2600      	movs	r6, #0
 8005b88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b8c:	f1b9 0901 	subs.w	r9, r9, #1
 8005b90:	d505      	bpl.n	8005b9e <_fwalk_sglue+0x22>
 8005b92:	6824      	ldr	r4, [r4, #0]
 8005b94:	2c00      	cmp	r4, #0
 8005b96:	d1f7      	bne.n	8005b88 <_fwalk_sglue+0xc>
 8005b98:	4630      	mov	r0, r6
 8005b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b9e:	89ab      	ldrh	r3, [r5, #12]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d907      	bls.n	8005bb4 <_fwalk_sglue+0x38>
 8005ba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	d003      	beq.n	8005bb4 <_fwalk_sglue+0x38>
 8005bac:	4629      	mov	r1, r5
 8005bae:	4638      	mov	r0, r7
 8005bb0:	47c0      	blx	r8
 8005bb2:	4306      	orrs	r6, r0
 8005bb4:	3568      	adds	r5, #104	; 0x68
 8005bb6:	e7e9      	b.n	8005b8c <_fwalk_sglue+0x10>

08005bb8 <iprintf>:
 8005bb8:	b40f      	push	{r0, r1, r2, r3}
 8005bba:	b507      	push	{r0, r1, r2, lr}
 8005bbc:	4906      	ldr	r1, [pc, #24]	; (8005bd8 <iprintf+0x20>)
 8005bbe:	ab04      	add	r3, sp, #16
 8005bc0:	6808      	ldr	r0, [r1, #0]
 8005bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bc6:	6881      	ldr	r1, [r0, #8]
 8005bc8:	9301      	str	r3, [sp, #4]
 8005bca:	f000 f9e7 	bl	8005f9c <_vfiprintf_r>
 8005bce:	b003      	add	sp, #12
 8005bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bd4:	b004      	add	sp, #16
 8005bd6:	4770      	bx	lr
 8005bd8:	20000064 	.word	0x20000064

08005bdc <__sread>:
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	460c      	mov	r4, r1
 8005be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be4:	f000 f868 	bl	8005cb8 <_read_r>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	bfab      	itete	ge
 8005bec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bee:	89a3      	ldrhlt	r3, [r4, #12]
 8005bf0:	181b      	addge	r3, r3, r0
 8005bf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bf6:	bfac      	ite	ge
 8005bf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bfa:	81a3      	strhlt	r3, [r4, #12]
 8005bfc:	bd10      	pop	{r4, pc}

08005bfe <__swrite>:
 8005bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c02:	461f      	mov	r7, r3
 8005c04:	898b      	ldrh	r3, [r1, #12]
 8005c06:	05db      	lsls	r3, r3, #23
 8005c08:	4605      	mov	r5, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	d505      	bpl.n	8005c1c <__swrite+0x1e>
 8005c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c14:	2302      	movs	r3, #2
 8005c16:	2200      	movs	r2, #0
 8005c18:	f000 f83c 	bl	8005c94 <_lseek_r>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	4632      	mov	r2, r6
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c32:	f000 b853 	b.w	8005cdc <_write_r>

08005c36 <__sseek>:
 8005c36:	b510      	push	{r4, lr}
 8005c38:	460c      	mov	r4, r1
 8005c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3e:	f000 f829 	bl	8005c94 <_lseek_r>
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	bf15      	itete	ne
 8005c48:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c52:	81a3      	strheq	r3, [r4, #12]
 8005c54:	bf18      	it	ne
 8005c56:	81a3      	strhne	r3, [r4, #12]
 8005c58:	bd10      	pop	{r4, pc}

08005c5a <__sclose>:
 8005c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5e:	f000 b809 	b.w	8005c74 <_close_r>

08005c62 <memset>:
 8005c62:	4402      	add	r2, r0
 8005c64:	4603      	mov	r3, r0
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d100      	bne.n	8005c6c <memset+0xa>
 8005c6a:	4770      	bx	lr
 8005c6c:	f803 1b01 	strb.w	r1, [r3], #1
 8005c70:	e7f9      	b.n	8005c66 <memset+0x4>
	...

08005c74 <_close_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4d06      	ldr	r5, [pc, #24]	; (8005c90 <_close_r+0x1c>)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	602b      	str	r3, [r5, #0]
 8005c80:	f7fb f837 	bl	8000cf2 <_close>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d102      	bne.n	8005c8e <_close_r+0x1a>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	b103      	cbz	r3, 8005c8e <_close_r+0x1a>
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	20000334 	.word	0x20000334

08005c94 <_lseek_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d07      	ldr	r5, [pc, #28]	; (8005cb4 <_lseek_r+0x20>)
 8005c98:	4604      	mov	r4, r0
 8005c9a:	4608      	mov	r0, r1
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	602a      	str	r2, [r5, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f7fb f84c 	bl	8000d40 <_lseek>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d102      	bne.n	8005cb2 <_lseek_r+0x1e>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	b103      	cbz	r3, 8005cb2 <_lseek_r+0x1e>
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	20000334 	.word	0x20000334

08005cb8 <_read_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d07      	ldr	r5, [pc, #28]	; (8005cd8 <_read_r+0x20>)
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	4608      	mov	r0, r1
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	602a      	str	r2, [r5, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f7fa fff6 	bl	8000cb8 <_read>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_read_r+0x1e>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_read_r+0x1e>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	20000334 	.word	0x20000334

08005cdc <_write_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4d07      	ldr	r5, [pc, #28]	; (8005cfc <_write_r+0x20>)
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	4608      	mov	r0, r1
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	602a      	str	r2, [r5, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	f7fa fc3e 	bl	800056c <_write>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_write_r+0x1e>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_write_r+0x1e>
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	20000334 	.word	0x20000334

08005d00 <__errno>:
 8005d00:	4b01      	ldr	r3, [pc, #4]	; (8005d08 <__errno+0x8>)
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000064 	.word	0x20000064

08005d0c <__libc_init_array>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	4d0d      	ldr	r5, [pc, #52]	; (8005d44 <__libc_init_array+0x38>)
 8005d10:	4c0d      	ldr	r4, [pc, #52]	; (8005d48 <__libc_init_array+0x3c>)
 8005d12:	1b64      	subs	r4, r4, r5
 8005d14:	10a4      	asrs	r4, r4, #2
 8005d16:	2600      	movs	r6, #0
 8005d18:	42a6      	cmp	r6, r4
 8005d1a:	d109      	bne.n	8005d30 <__libc_init_array+0x24>
 8005d1c:	4d0b      	ldr	r5, [pc, #44]	; (8005d4c <__libc_init_array+0x40>)
 8005d1e:	4c0c      	ldr	r4, [pc, #48]	; (8005d50 <__libc_init_array+0x44>)
 8005d20:	f000 fdbe 	bl	80068a0 <_init>
 8005d24:	1b64      	subs	r4, r4, r5
 8005d26:	10a4      	asrs	r4, r4, #2
 8005d28:	2600      	movs	r6, #0
 8005d2a:	42a6      	cmp	r6, r4
 8005d2c:	d105      	bne.n	8005d3a <__libc_init_array+0x2e>
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d34:	4798      	blx	r3
 8005d36:	3601      	adds	r6, #1
 8005d38:	e7ee      	b.n	8005d18 <__libc_init_array+0xc>
 8005d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d3e:	4798      	blx	r3
 8005d40:	3601      	adds	r6, #1
 8005d42:	e7f2      	b.n	8005d2a <__libc_init_array+0x1e>
 8005d44:	08006950 	.word	0x08006950
 8005d48:	08006950 	.word	0x08006950
 8005d4c:	08006950 	.word	0x08006950
 8005d50:	08006954 	.word	0x08006954

08005d54 <__retarget_lock_acquire_recursive>:
 8005d54:	4770      	bx	lr

08005d56 <__retarget_lock_release_recursive>:
 8005d56:	4770      	bx	lr

08005d58 <_free_r>:
 8005d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d5a:	2900      	cmp	r1, #0
 8005d5c:	d044      	beq.n	8005de8 <_free_r+0x90>
 8005d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d62:	9001      	str	r0, [sp, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f1a1 0404 	sub.w	r4, r1, #4
 8005d6a:	bfb8      	it	lt
 8005d6c:	18e4      	addlt	r4, r4, r3
 8005d6e:	f000 f8df 	bl	8005f30 <__malloc_lock>
 8005d72:	4a1e      	ldr	r2, [pc, #120]	; (8005dec <_free_r+0x94>)
 8005d74:	9801      	ldr	r0, [sp, #4]
 8005d76:	6813      	ldr	r3, [r2, #0]
 8005d78:	b933      	cbnz	r3, 8005d88 <_free_r+0x30>
 8005d7a:	6063      	str	r3, [r4, #4]
 8005d7c:	6014      	str	r4, [r2, #0]
 8005d7e:	b003      	add	sp, #12
 8005d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d84:	f000 b8da 	b.w	8005f3c <__malloc_unlock>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d908      	bls.n	8005d9e <_free_r+0x46>
 8005d8c:	6825      	ldr	r5, [r4, #0]
 8005d8e:	1961      	adds	r1, r4, r5
 8005d90:	428b      	cmp	r3, r1
 8005d92:	bf01      	itttt	eq
 8005d94:	6819      	ldreq	r1, [r3, #0]
 8005d96:	685b      	ldreq	r3, [r3, #4]
 8005d98:	1949      	addeq	r1, r1, r5
 8005d9a:	6021      	streq	r1, [r4, #0]
 8005d9c:	e7ed      	b.n	8005d7a <_free_r+0x22>
 8005d9e:	461a      	mov	r2, r3
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	b10b      	cbz	r3, 8005da8 <_free_r+0x50>
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	d9fa      	bls.n	8005d9e <_free_r+0x46>
 8005da8:	6811      	ldr	r1, [r2, #0]
 8005daa:	1855      	adds	r5, r2, r1
 8005dac:	42a5      	cmp	r5, r4
 8005dae:	d10b      	bne.n	8005dc8 <_free_r+0x70>
 8005db0:	6824      	ldr	r4, [r4, #0]
 8005db2:	4421      	add	r1, r4
 8005db4:	1854      	adds	r4, r2, r1
 8005db6:	42a3      	cmp	r3, r4
 8005db8:	6011      	str	r1, [r2, #0]
 8005dba:	d1e0      	bne.n	8005d7e <_free_r+0x26>
 8005dbc:	681c      	ldr	r4, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	6053      	str	r3, [r2, #4]
 8005dc2:	440c      	add	r4, r1
 8005dc4:	6014      	str	r4, [r2, #0]
 8005dc6:	e7da      	b.n	8005d7e <_free_r+0x26>
 8005dc8:	d902      	bls.n	8005dd0 <_free_r+0x78>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	6003      	str	r3, [r0, #0]
 8005dce:	e7d6      	b.n	8005d7e <_free_r+0x26>
 8005dd0:	6825      	ldr	r5, [r4, #0]
 8005dd2:	1961      	adds	r1, r4, r5
 8005dd4:	428b      	cmp	r3, r1
 8005dd6:	bf04      	itt	eq
 8005dd8:	6819      	ldreq	r1, [r3, #0]
 8005dda:	685b      	ldreq	r3, [r3, #4]
 8005ddc:	6063      	str	r3, [r4, #4]
 8005dde:	bf04      	itt	eq
 8005de0:	1949      	addeq	r1, r1, r5
 8005de2:	6021      	streq	r1, [r4, #0]
 8005de4:	6054      	str	r4, [r2, #4]
 8005de6:	e7ca      	b.n	8005d7e <_free_r+0x26>
 8005de8:	b003      	add	sp, #12
 8005dea:	bd30      	pop	{r4, r5, pc}
 8005dec:	2000033c 	.word	0x2000033c

08005df0 <sbrk_aligned>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	4e0e      	ldr	r6, [pc, #56]	; (8005e2c <sbrk_aligned+0x3c>)
 8005df4:	460c      	mov	r4, r1
 8005df6:	6831      	ldr	r1, [r6, #0]
 8005df8:	4605      	mov	r5, r0
 8005dfa:	b911      	cbnz	r1, 8005e02 <sbrk_aligned+0x12>
 8005dfc:	f000 fcbc 	bl	8006778 <_sbrk_r>
 8005e00:	6030      	str	r0, [r6, #0]
 8005e02:	4621      	mov	r1, r4
 8005e04:	4628      	mov	r0, r5
 8005e06:	f000 fcb7 	bl	8006778 <_sbrk_r>
 8005e0a:	1c43      	adds	r3, r0, #1
 8005e0c:	d00a      	beq.n	8005e24 <sbrk_aligned+0x34>
 8005e0e:	1cc4      	adds	r4, r0, #3
 8005e10:	f024 0403 	bic.w	r4, r4, #3
 8005e14:	42a0      	cmp	r0, r4
 8005e16:	d007      	beq.n	8005e28 <sbrk_aligned+0x38>
 8005e18:	1a21      	subs	r1, r4, r0
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f000 fcac 	bl	8006778 <_sbrk_r>
 8005e20:	3001      	adds	r0, #1
 8005e22:	d101      	bne.n	8005e28 <sbrk_aligned+0x38>
 8005e24:	f04f 34ff 	mov.w	r4, #4294967295
 8005e28:	4620      	mov	r0, r4
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	20000340 	.word	0x20000340

08005e30 <_malloc_r>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	1ccd      	adds	r5, r1, #3
 8005e36:	f025 0503 	bic.w	r5, r5, #3
 8005e3a:	3508      	adds	r5, #8
 8005e3c:	2d0c      	cmp	r5, #12
 8005e3e:	bf38      	it	cc
 8005e40:	250c      	movcc	r5, #12
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	4607      	mov	r7, r0
 8005e46:	db01      	blt.n	8005e4c <_malloc_r+0x1c>
 8005e48:	42a9      	cmp	r1, r5
 8005e4a:	d905      	bls.n	8005e58 <_malloc_r+0x28>
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	2600      	movs	r6, #0
 8005e52:	4630      	mov	r0, r6
 8005e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f2c <_malloc_r+0xfc>
 8005e5c:	f000 f868 	bl	8005f30 <__malloc_lock>
 8005e60:	f8d8 3000 	ldr.w	r3, [r8]
 8005e64:	461c      	mov	r4, r3
 8005e66:	bb5c      	cbnz	r4, 8005ec0 <_malloc_r+0x90>
 8005e68:	4629      	mov	r1, r5
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	f7ff ffc0 	bl	8005df0 <sbrk_aligned>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	4604      	mov	r4, r0
 8005e74:	d155      	bne.n	8005f22 <_malloc_r+0xf2>
 8005e76:	f8d8 4000 	ldr.w	r4, [r8]
 8005e7a:	4626      	mov	r6, r4
 8005e7c:	2e00      	cmp	r6, #0
 8005e7e:	d145      	bne.n	8005f0c <_malloc_r+0xdc>
 8005e80:	2c00      	cmp	r4, #0
 8005e82:	d048      	beq.n	8005f16 <_malloc_r+0xe6>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	4631      	mov	r1, r6
 8005e88:	4638      	mov	r0, r7
 8005e8a:	eb04 0903 	add.w	r9, r4, r3
 8005e8e:	f000 fc73 	bl	8006778 <_sbrk_r>
 8005e92:	4581      	cmp	r9, r0
 8005e94:	d13f      	bne.n	8005f16 <_malloc_r+0xe6>
 8005e96:	6821      	ldr	r1, [r4, #0]
 8005e98:	1a6d      	subs	r5, r5, r1
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f7ff ffa7 	bl	8005df0 <sbrk_aligned>
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d037      	beq.n	8005f16 <_malloc_r+0xe6>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	442b      	add	r3, r5
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	f8d8 3000 	ldr.w	r3, [r8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d038      	beq.n	8005f26 <_malloc_r+0xf6>
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	42a2      	cmp	r2, r4
 8005eb8:	d12b      	bne.n	8005f12 <_malloc_r+0xe2>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	e00f      	b.n	8005ee0 <_malloc_r+0xb0>
 8005ec0:	6822      	ldr	r2, [r4, #0]
 8005ec2:	1b52      	subs	r2, r2, r5
 8005ec4:	d41f      	bmi.n	8005f06 <_malloc_r+0xd6>
 8005ec6:	2a0b      	cmp	r2, #11
 8005ec8:	d917      	bls.n	8005efa <_malloc_r+0xca>
 8005eca:	1961      	adds	r1, r4, r5
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	6025      	str	r5, [r4, #0]
 8005ed0:	bf18      	it	ne
 8005ed2:	6059      	strne	r1, [r3, #4]
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	bf08      	it	eq
 8005ed8:	f8c8 1000 	streq.w	r1, [r8]
 8005edc:	5162      	str	r2, [r4, r5]
 8005ede:	604b      	str	r3, [r1, #4]
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	f104 060b 	add.w	r6, r4, #11
 8005ee6:	f000 f829 	bl	8005f3c <__malloc_unlock>
 8005eea:	f026 0607 	bic.w	r6, r6, #7
 8005eee:	1d23      	adds	r3, r4, #4
 8005ef0:	1af2      	subs	r2, r6, r3
 8005ef2:	d0ae      	beq.n	8005e52 <_malloc_r+0x22>
 8005ef4:	1b9b      	subs	r3, r3, r6
 8005ef6:	50a3      	str	r3, [r4, r2]
 8005ef8:	e7ab      	b.n	8005e52 <_malloc_r+0x22>
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	6862      	ldr	r2, [r4, #4]
 8005efe:	d1dd      	bne.n	8005ebc <_malloc_r+0x8c>
 8005f00:	f8c8 2000 	str.w	r2, [r8]
 8005f04:	e7ec      	b.n	8005ee0 <_malloc_r+0xb0>
 8005f06:	4623      	mov	r3, r4
 8005f08:	6864      	ldr	r4, [r4, #4]
 8005f0a:	e7ac      	b.n	8005e66 <_malloc_r+0x36>
 8005f0c:	4634      	mov	r4, r6
 8005f0e:	6876      	ldr	r6, [r6, #4]
 8005f10:	e7b4      	b.n	8005e7c <_malloc_r+0x4c>
 8005f12:	4613      	mov	r3, r2
 8005f14:	e7cc      	b.n	8005eb0 <_malloc_r+0x80>
 8005f16:	230c      	movs	r3, #12
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	f000 f80e 	bl	8005f3c <__malloc_unlock>
 8005f20:	e797      	b.n	8005e52 <_malloc_r+0x22>
 8005f22:	6025      	str	r5, [r4, #0]
 8005f24:	e7dc      	b.n	8005ee0 <_malloc_r+0xb0>
 8005f26:	605b      	str	r3, [r3, #4]
 8005f28:	deff      	udf	#255	; 0xff
 8005f2a:	bf00      	nop
 8005f2c:	2000033c 	.word	0x2000033c

08005f30 <__malloc_lock>:
 8005f30:	4801      	ldr	r0, [pc, #4]	; (8005f38 <__malloc_lock+0x8>)
 8005f32:	f7ff bf0f 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005f36:	bf00      	nop
 8005f38:	20000338 	.word	0x20000338

08005f3c <__malloc_unlock>:
 8005f3c:	4801      	ldr	r0, [pc, #4]	; (8005f44 <__malloc_unlock+0x8>)
 8005f3e:	f7ff bf0a 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005f42:	bf00      	nop
 8005f44:	20000338 	.word	0x20000338

08005f48 <__sfputc_r>:
 8005f48:	6893      	ldr	r3, [r2, #8]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	b410      	push	{r4}
 8005f50:	6093      	str	r3, [r2, #8]
 8005f52:	da08      	bge.n	8005f66 <__sfputc_r+0x1e>
 8005f54:	6994      	ldr	r4, [r2, #24]
 8005f56:	42a3      	cmp	r3, r4
 8005f58:	db01      	blt.n	8005f5e <__sfputc_r+0x16>
 8005f5a:	290a      	cmp	r1, #10
 8005f5c:	d103      	bne.n	8005f66 <__sfputc_r+0x1e>
 8005f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f62:	f000 bb73 	b.w	800664c <__swbuf_r>
 8005f66:	6813      	ldr	r3, [r2, #0]
 8005f68:	1c58      	adds	r0, r3, #1
 8005f6a:	6010      	str	r0, [r2, #0]
 8005f6c:	7019      	strb	r1, [r3, #0]
 8005f6e:	4608      	mov	r0, r1
 8005f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <__sfputs_r>:
 8005f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f78:	4606      	mov	r6, r0
 8005f7a:	460f      	mov	r7, r1
 8005f7c:	4614      	mov	r4, r2
 8005f7e:	18d5      	adds	r5, r2, r3
 8005f80:	42ac      	cmp	r4, r5
 8005f82:	d101      	bne.n	8005f88 <__sfputs_r+0x12>
 8005f84:	2000      	movs	r0, #0
 8005f86:	e007      	b.n	8005f98 <__sfputs_r+0x22>
 8005f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f8c:	463a      	mov	r2, r7
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f7ff ffda 	bl	8005f48 <__sfputc_r>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d1f3      	bne.n	8005f80 <__sfputs_r+0xa>
 8005f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f9c <_vfiprintf_r>:
 8005f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa0:	460d      	mov	r5, r1
 8005fa2:	b09d      	sub	sp, #116	; 0x74
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	4698      	mov	r8, r3
 8005fa8:	4606      	mov	r6, r0
 8005faa:	b118      	cbz	r0, 8005fb4 <_vfiprintf_r+0x18>
 8005fac:	6a03      	ldr	r3, [r0, #32]
 8005fae:	b90b      	cbnz	r3, 8005fb4 <_vfiprintf_r+0x18>
 8005fb0:	f7ff fdcc 	bl	8005b4c <__sinit>
 8005fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fb6:	07d9      	lsls	r1, r3, #31
 8005fb8:	d405      	bmi.n	8005fc6 <_vfiprintf_r+0x2a>
 8005fba:	89ab      	ldrh	r3, [r5, #12]
 8005fbc:	059a      	lsls	r2, r3, #22
 8005fbe:	d402      	bmi.n	8005fc6 <_vfiprintf_r+0x2a>
 8005fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fc2:	f7ff fec7 	bl	8005d54 <__retarget_lock_acquire_recursive>
 8005fc6:	89ab      	ldrh	r3, [r5, #12]
 8005fc8:	071b      	lsls	r3, r3, #28
 8005fca:	d501      	bpl.n	8005fd0 <_vfiprintf_r+0x34>
 8005fcc:	692b      	ldr	r3, [r5, #16]
 8005fce:	b99b      	cbnz	r3, 8005ff8 <_vfiprintf_r+0x5c>
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f000 fb78 	bl	80066c8 <__swsetup_r>
 8005fd8:	b170      	cbz	r0, 8005ff8 <_vfiprintf_r+0x5c>
 8005fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fdc:	07dc      	lsls	r4, r3, #31
 8005fde:	d504      	bpl.n	8005fea <_vfiprintf_r+0x4e>
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe4:	b01d      	add	sp, #116	; 0x74
 8005fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fea:	89ab      	ldrh	r3, [r5, #12]
 8005fec:	0598      	lsls	r0, r3, #22
 8005fee:	d4f7      	bmi.n	8005fe0 <_vfiprintf_r+0x44>
 8005ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ff2:	f7ff feb0 	bl	8005d56 <__retarget_lock_release_recursive>
 8005ff6:	e7f3      	b.n	8005fe0 <_vfiprintf_r+0x44>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8005ffc:	2320      	movs	r3, #32
 8005ffe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006002:	f8cd 800c 	str.w	r8, [sp, #12]
 8006006:	2330      	movs	r3, #48	; 0x30
 8006008:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80061bc <_vfiprintf_r+0x220>
 800600c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006010:	f04f 0901 	mov.w	r9, #1
 8006014:	4623      	mov	r3, r4
 8006016:	469a      	mov	sl, r3
 8006018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800601c:	b10a      	cbz	r2, 8006022 <_vfiprintf_r+0x86>
 800601e:	2a25      	cmp	r2, #37	; 0x25
 8006020:	d1f9      	bne.n	8006016 <_vfiprintf_r+0x7a>
 8006022:	ebba 0b04 	subs.w	fp, sl, r4
 8006026:	d00b      	beq.n	8006040 <_vfiprintf_r+0xa4>
 8006028:	465b      	mov	r3, fp
 800602a:	4622      	mov	r2, r4
 800602c:	4629      	mov	r1, r5
 800602e:	4630      	mov	r0, r6
 8006030:	f7ff ffa1 	bl	8005f76 <__sfputs_r>
 8006034:	3001      	adds	r0, #1
 8006036:	f000 80a9 	beq.w	800618c <_vfiprintf_r+0x1f0>
 800603a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800603c:	445a      	add	r2, fp
 800603e:	9209      	str	r2, [sp, #36]	; 0x24
 8006040:	f89a 3000 	ldrb.w	r3, [sl]
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80a1 	beq.w	800618c <_vfiprintf_r+0x1f0>
 800604a:	2300      	movs	r3, #0
 800604c:	f04f 32ff 	mov.w	r2, #4294967295
 8006050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006054:	f10a 0a01 	add.w	sl, sl, #1
 8006058:	9304      	str	r3, [sp, #16]
 800605a:	9307      	str	r3, [sp, #28]
 800605c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006060:	931a      	str	r3, [sp, #104]	; 0x68
 8006062:	4654      	mov	r4, sl
 8006064:	2205      	movs	r2, #5
 8006066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606a:	4854      	ldr	r0, [pc, #336]	; (80061bc <_vfiprintf_r+0x220>)
 800606c:	f7fa f8b0 	bl	80001d0 <memchr>
 8006070:	9a04      	ldr	r2, [sp, #16]
 8006072:	b9d8      	cbnz	r0, 80060ac <_vfiprintf_r+0x110>
 8006074:	06d1      	lsls	r1, r2, #27
 8006076:	bf44      	itt	mi
 8006078:	2320      	movmi	r3, #32
 800607a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800607e:	0713      	lsls	r3, r2, #28
 8006080:	bf44      	itt	mi
 8006082:	232b      	movmi	r3, #43	; 0x2b
 8006084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006088:	f89a 3000 	ldrb.w	r3, [sl]
 800608c:	2b2a      	cmp	r3, #42	; 0x2a
 800608e:	d015      	beq.n	80060bc <_vfiprintf_r+0x120>
 8006090:	9a07      	ldr	r2, [sp, #28]
 8006092:	4654      	mov	r4, sl
 8006094:	2000      	movs	r0, #0
 8006096:	f04f 0c0a 	mov.w	ip, #10
 800609a:	4621      	mov	r1, r4
 800609c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060a0:	3b30      	subs	r3, #48	; 0x30
 80060a2:	2b09      	cmp	r3, #9
 80060a4:	d94d      	bls.n	8006142 <_vfiprintf_r+0x1a6>
 80060a6:	b1b0      	cbz	r0, 80060d6 <_vfiprintf_r+0x13a>
 80060a8:	9207      	str	r2, [sp, #28]
 80060aa:	e014      	b.n	80060d6 <_vfiprintf_r+0x13a>
 80060ac:	eba0 0308 	sub.w	r3, r0, r8
 80060b0:	fa09 f303 	lsl.w	r3, r9, r3
 80060b4:	4313      	orrs	r3, r2
 80060b6:	9304      	str	r3, [sp, #16]
 80060b8:	46a2      	mov	sl, r4
 80060ba:	e7d2      	b.n	8006062 <_vfiprintf_r+0xc6>
 80060bc:	9b03      	ldr	r3, [sp, #12]
 80060be:	1d19      	adds	r1, r3, #4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	9103      	str	r1, [sp, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bfbb      	ittet	lt
 80060c8:	425b      	neglt	r3, r3
 80060ca:	f042 0202 	orrlt.w	r2, r2, #2
 80060ce:	9307      	strge	r3, [sp, #28]
 80060d0:	9307      	strlt	r3, [sp, #28]
 80060d2:	bfb8      	it	lt
 80060d4:	9204      	strlt	r2, [sp, #16]
 80060d6:	7823      	ldrb	r3, [r4, #0]
 80060d8:	2b2e      	cmp	r3, #46	; 0x2e
 80060da:	d10c      	bne.n	80060f6 <_vfiprintf_r+0x15a>
 80060dc:	7863      	ldrb	r3, [r4, #1]
 80060de:	2b2a      	cmp	r3, #42	; 0x2a
 80060e0:	d134      	bne.n	800614c <_vfiprintf_r+0x1b0>
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	1d1a      	adds	r2, r3, #4
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	9203      	str	r2, [sp, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bfb8      	it	lt
 80060ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80060f2:	3402      	adds	r4, #2
 80060f4:	9305      	str	r3, [sp, #20]
 80060f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80061cc <_vfiprintf_r+0x230>
 80060fa:	7821      	ldrb	r1, [r4, #0]
 80060fc:	2203      	movs	r2, #3
 80060fe:	4650      	mov	r0, sl
 8006100:	f7fa f866 	bl	80001d0 <memchr>
 8006104:	b138      	cbz	r0, 8006116 <_vfiprintf_r+0x17a>
 8006106:	9b04      	ldr	r3, [sp, #16]
 8006108:	eba0 000a 	sub.w	r0, r0, sl
 800610c:	2240      	movs	r2, #64	; 0x40
 800610e:	4082      	lsls	r2, r0
 8006110:	4313      	orrs	r3, r2
 8006112:	3401      	adds	r4, #1
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611a:	4829      	ldr	r0, [pc, #164]	; (80061c0 <_vfiprintf_r+0x224>)
 800611c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006120:	2206      	movs	r2, #6
 8006122:	f7fa f855 	bl	80001d0 <memchr>
 8006126:	2800      	cmp	r0, #0
 8006128:	d03f      	beq.n	80061aa <_vfiprintf_r+0x20e>
 800612a:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <_vfiprintf_r+0x228>)
 800612c:	bb1b      	cbnz	r3, 8006176 <_vfiprintf_r+0x1da>
 800612e:	9b03      	ldr	r3, [sp, #12]
 8006130:	3307      	adds	r3, #7
 8006132:	f023 0307 	bic.w	r3, r3, #7
 8006136:	3308      	adds	r3, #8
 8006138:	9303      	str	r3, [sp, #12]
 800613a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613c:	443b      	add	r3, r7
 800613e:	9309      	str	r3, [sp, #36]	; 0x24
 8006140:	e768      	b.n	8006014 <_vfiprintf_r+0x78>
 8006142:	fb0c 3202 	mla	r2, ip, r2, r3
 8006146:	460c      	mov	r4, r1
 8006148:	2001      	movs	r0, #1
 800614a:	e7a6      	b.n	800609a <_vfiprintf_r+0xfe>
 800614c:	2300      	movs	r3, #0
 800614e:	3401      	adds	r4, #1
 8006150:	9305      	str	r3, [sp, #20]
 8006152:	4619      	mov	r1, r3
 8006154:	f04f 0c0a 	mov.w	ip, #10
 8006158:	4620      	mov	r0, r4
 800615a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800615e:	3a30      	subs	r2, #48	; 0x30
 8006160:	2a09      	cmp	r2, #9
 8006162:	d903      	bls.n	800616c <_vfiprintf_r+0x1d0>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0c6      	beq.n	80060f6 <_vfiprintf_r+0x15a>
 8006168:	9105      	str	r1, [sp, #20]
 800616a:	e7c4      	b.n	80060f6 <_vfiprintf_r+0x15a>
 800616c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006170:	4604      	mov	r4, r0
 8006172:	2301      	movs	r3, #1
 8006174:	e7f0      	b.n	8006158 <_vfiprintf_r+0x1bc>
 8006176:	ab03      	add	r3, sp, #12
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	462a      	mov	r2, r5
 800617c:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <_vfiprintf_r+0x22c>)
 800617e:	a904      	add	r1, sp, #16
 8006180:	4630      	mov	r0, r6
 8006182:	f3af 8000 	nop.w
 8006186:	4607      	mov	r7, r0
 8006188:	1c78      	adds	r0, r7, #1
 800618a:	d1d6      	bne.n	800613a <_vfiprintf_r+0x19e>
 800618c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800618e:	07d9      	lsls	r1, r3, #31
 8006190:	d405      	bmi.n	800619e <_vfiprintf_r+0x202>
 8006192:	89ab      	ldrh	r3, [r5, #12]
 8006194:	059a      	lsls	r2, r3, #22
 8006196:	d402      	bmi.n	800619e <_vfiprintf_r+0x202>
 8006198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800619a:	f7ff fddc 	bl	8005d56 <__retarget_lock_release_recursive>
 800619e:	89ab      	ldrh	r3, [r5, #12]
 80061a0:	065b      	lsls	r3, r3, #25
 80061a2:	f53f af1d 	bmi.w	8005fe0 <_vfiprintf_r+0x44>
 80061a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061a8:	e71c      	b.n	8005fe4 <_vfiprintf_r+0x48>
 80061aa:	ab03      	add	r3, sp, #12
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	462a      	mov	r2, r5
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <_vfiprintf_r+0x22c>)
 80061b2:	a904      	add	r1, sp, #16
 80061b4:	4630      	mov	r0, r6
 80061b6:	f000 f879 	bl	80062ac <_printf_i>
 80061ba:	e7e4      	b.n	8006186 <_vfiprintf_r+0x1ea>
 80061bc:	08006914 	.word	0x08006914
 80061c0:	0800691e 	.word	0x0800691e
 80061c4:	00000000 	.word	0x00000000
 80061c8:	08005f77 	.word	0x08005f77
 80061cc:	0800691a 	.word	0x0800691a

080061d0 <_printf_common>:
 80061d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	4616      	mov	r6, r2
 80061d6:	4699      	mov	r9, r3
 80061d8:	688a      	ldr	r2, [r1, #8]
 80061da:	690b      	ldr	r3, [r1, #16]
 80061dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061e0:	4293      	cmp	r3, r2
 80061e2:	bfb8      	it	lt
 80061e4:	4613      	movlt	r3, r2
 80061e6:	6033      	str	r3, [r6, #0]
 80061e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061ec:	4607      	mov	r7, r0
 80061ee:	460c      	mov	r4, r1
 80061f0:	b10a      	cbz	r2, 80061f6 <_printf_common+0x26>
 80061f2:	3301      	adds	r3, #1
 80061f4:	6033      	str	r3, [r6, #0]
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	0699      	lsls	r1, r3, #26
 80061fa:	bf42      	ittt	mi
 80061fc:	6833      	ldrmi	r3, [r6, #0]
 80061fe:	3302      	addmi	r3, #2
 8006200:	6033      	strmi	r3, [r6, #0]
 8006202:	6825      	ldr	r5, [r4, #0]
 8006204:	f015 0506 	ands.w	r5, r5, #6
 8006208:	d106      	bne.n	8006218 <_printf_common+0x48>
 800620a:	f104 0a19 	add.w	sl, r4, #25
 800620e:	68e3      	ldr	r3, [r4, #12]
 8006210:	6832      	ldr	r2, [r6, #0]
 8006212:	1a9b      	subs	r3, r3, r2
 8006214:	42ab      	cmp	r3, r5
 8006216:	dc26      	bgt.n	8006266 <_printf_common+0x96>
 8006218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800621c:	1e13      	subs	r3, r2, #0
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	bf18      	it	ne
 8006222:	2301      	movne	r3, #1
 8006224:	0692      	lsls	r2, r2, #26
 8006226:	d42b      	bmi.n	8006280 <_printf_common+0xb0>
 8006228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800622c:	4649      	mov	r1, r9
 800622e:	4638      	mov	r0, r7
 8006230:	47c0      	blx	r8
 8006232:	3001      	adds	r0, #1
 8006234:	d01e      	beq.n	8006274 <_printf_common+0xa4>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	6922      	ldr	r2, [r4, #16]
 800623a:	f003 0306 	and.w	r3, r3, #6
 800623e:	2b04      	cmp	r3, #4
 8006240:	bf02      	ittt	eq
 8006242:	68e5      	ldreq	r5, [r4, #12]
 8006244:	6833      	ldreq	r3, [r6, #0]
 8006246:	1aed      	subeq	r5, r5, r3
 8006248:	68a3      	ldr	r3, [r4, #8]
 800624a:	bf0c      	ite	eq
 800624c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006250:	2500      	movne	r5, #0
 8006252:	4293      	cmp	r3, r2
 8006254:	bfc4      	itt	gt
 8006256:	1a9b      	subgt	r3, r3, r2
 8006258:	18ed      	addgt	r5, r5, r3
 800625a:	2600      	movs	r6, #0
 800625c:	341a      	adds	r4, #26
 800625e:	42b5      	cmp	r5, r6
 8006260:	d11a      	bne.n	8006298 <_printf_common+0xc8>
 8006262:	2000      	movs	r0, #0
 8006264:	e008      	b.n	8006278 <_printf_common+0xa8>
 8006266:	2301      	movs	r3, #1
 8006268:	4652      	mov	r2, sl
 800626a:	4649      	mov	r1, r9
 800626c:	4638      	mov	r0, r7
 800626e:	47c0      	blx	r8
 8006270:	3001      	adds	r0, #1
 8006272:	d103      	bne.n	800627c <_printf_common+0xac>
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627c:	3501      	adds	r5, #1
 800627e:	e7c6      	b.n	800620e <_printf_common+0x3e>
 8006280:	18e1      	adds	r1, r4, r3
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	2030      	movs	r0, #48	; 0x30
 8006286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800628a:	4422      	add	r2, r4
 800628c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006294:	3302      	adds	r3, #2
 8006296:	e7c7      	b.n	8006228 <_printf_common+0x58>
 8006298:	2301      	movs	r3, #1
 800629a:	4622      	mov	r2, r4
 800629c:	4649      	mov	r1, r9
 800629e:	4638      	mov	r0, r7
 80062a0:	47c0      	blx	r8
 80062a2:	3001      	adds	r0, #1
 80062a4:	d0e6      	beq.n	8006274 <_printf_common+0xa4>
 80062a6:	3601      	adds	r6, #1
 80062a8:	e7d9      	b.n	800625e <_printf_common+0x8e>
	...

080062ac <_printf_i>:
 80062ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b0:	7e0f      	ldrb	r7, [r1, #24]
 80062b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062b4:	2f78      	cmp	r7, #120	; 0x78
 80062b6:	4691      	mov	r9, r2
 80062b8:	4680      	mov	r8, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	469a      	mov	sl, r3
 80062be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062c2:	d807      	bhi.n	80062d4 <_printf_i+0x28>
 80062c4:	2f62      	cmp	r7, #98	; 0x62
 80062c6:	d80a      	bhi.n	80062de <_printf_i+0x32>
 80062c8:	2f00      	cmp	r7, #0
 80062ca:	f000 80d4 	beq.w	8006476 <_printf_i+0x1ca>
 80062ce:	2f58      	cmp	r7, #88	; 0x58
 80062d0:	f000 80c0 	beq.w	8006454 <_printf_i+0x1a8>
 80062d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062dc:	e03a      	b.n	8006354 <_printf_i+0xa8>
 80062de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062e2:	2b15      	cmp	r3, #21
 80062e4:	d8f6      	bhi.n	80062d4 <_printf_i+0x28>
 80062e6:	a101      	add	r1, pc, #4	; (adr r1, 80062ec <_printf_i+0x40>)
 80062e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062ec:	08006345 	.word	0x08006345
 80062f0:	08006359 	.word	0x08006359
 80062f4:	080062d5 	.word	0x080062d5
 80062f8:	080062d5 	.word	0x080062d5
 80062fc:	080062d5 	.word	0x080062d5
 8006300:	080062d5 	.word	0x080062d5
 8006304:	08006359 	.word	0x08006359
 8006308:	080062d5 	.word	0x080062d5
 800630c:	080062d5 	.word	0x080062d5
 8006310:	080062d5 	.word	0x080062d5
 8006314:	080062d5 	.word	0x080062d5
 8006318:	0800645d 	.word	0x0800645d
 800631c:	08006385 	.word	0x08006385
 8006320:	08006417 	.word	0x08006417
 8006324:	080062d5 	.word	0x080062d5
 8006328:	080062d5 	.word	0x080062d5
 800632c:	0800647f 	.word	0x0800647f
 8006330:	080062d5 	.word	0x080062d5
 8006334:	08006385 	.word	0x08006385
 8006338:	080062d5 	.word	0x080062d5
 800633c:	080062d5 	.word	0x080062d5
 8006340:	0800641f 	.word	0x0800641f
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	1d1a      	adds	r2, r3, #4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	602a      	str	r2, [r5, #0]
 800634c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006354:	2301      	movs	r3, #1
 8006356:	e09f      	b.n	8006498 <_printf_i+0x1ec>
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	682b      	ldr	r3, [r5, #0]
 800635c:	0607      	lsls	r7, r0, #24
 800635e:	f103 0104 	add.w	r1, r3, #4
 8006362:	6029      	str	r1, [r5, #0]
 8006364:	d501      	bpl.n	800636a <_printf_i+0xbe>
 8006366:	681e      	ldr	r6, [r3, #0]
 8006368:	e003      	b.n	8006372 <_printf_i+0xc6>
 800636a:	0646      	lsls	r6, r0, #25
 800636c:	d5fb      	bpl.n	8006366 <_printf_i+0xba>
 800636e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006372:	2e00      	cmp	r6, #0
 8006374:	da03      	bge.n	800637e <_printf_i+0xd2>
 8006376:	232d      	movs	r3, #45	; 0x2d
 8006378:	4276      	negs	r6, r6
 800637a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637e:	485a      	ldr	r0, [pc, #360]	; (80064e8 <_printf_i+0x23c>)
 8006380:	230a      	movs	r3, #10
 8006382:	e012      	b.n	80063aa <_printf_i+0xfe>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	6820      	ldr	r0, [r4, #0]
 8006388:	1d19      	adds	r1, r3, #4
 800638a:	6029      	str	r1, [r5, #0]
 800638c:	0605      	lsls	r5, r0, #24
 800638e:	d501      	bpl.n	8006394 <_printf_i+0xe8>
 8006390:	681e      	ldr	r6, [r3, #0]
 8006392:	e002      	b.n	800639a <_printf_i+0xee>
 8006394:	0641      	lsls	r1, r0, #25
 8006396:	d5fb      	bpl.n	8006390 <_printf_i+0xe4>
 8006398:	881e      	ldrh	r6, [r3, #0]
 800639a:	4853      	ldr	r0, [pc, #332]	; (80064e8 <_printf_i+0x23c>)
 800639c:	2f6f      	cmp	r7, #111	; 0x6f
 800639e:	bf0c      	ite	eq
 80063a0:	2308      	moveq	r3, #8
 80063a2:	230a      	movne	r3, #10
 80063a4:	2100      	movs	r1, #0
 80063a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063aa:	6865      	ldr	r5, [r4, #4]
 80063ac:	60a5      	str	r5, [r4, #8]
 80063ae:	2d00      	cmp	r5, #0
 80063b0:	bfa2      	ittt	ge
 80063b2:	6821      	ldrge	r1, [r4, #0]
 80063b4:	f021 0104 	bicge.w	r1, r1, #4
 80063b8:	6021      	strge	r1, [r4, #0]
 80063ba:	b90e      	cbnz	r6, 80063c0 <_printf_i+0x114>
 80063bc:	2d00      	cmp	r5, #0
 80063be:	d04b      	beq.n	8006458 <_printf_i+0x1ac>
 80063c0:	4615      	mov	r5, r2
 80063c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80063c6:	fb03 6711 	mls	r7, r3, r1, r6
 80063ca:	5dc7      	ldrb	r7, [r0, r7]
 80063cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063d0:	4637      	mov	r7, r6
 80063d2:	42bb      	cmp	r3, r7
 80063d4:	460e      	mov	r6, r1
 80063d6:	d9f4      	bls.n	80063c2 <_printf_i+0x116>
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d10b      	bne.n	80063f4 <_printf_i+0x148>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	07de      	lsls	r6, r3, #31
 80063e0:	d508      	bpl.n	80063f4 <_printf_i+0x148>
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	6861      	ldr	r1, [r4, #4]
 80063e6:	4299      	cmp	r1, r3
 80063e8:	bfde      	ittt	le
 80063ea:	2330      	movle	r3, #48	; 0x30
 80063ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063f4:	1b52      	subs	r2, r2, r5
 80063f6:	6122      	str	r2, [r4, #16]
 80063f8:	f8cd a000 	str.w	sl, [sp]
 80063fc:	464b      	mov	r3, r9
 80063fe:	aa03      	add	r2, sp, #12
 8006400:	4621      	mov	r1, r4
 8006402:	4640      	mov	r0, r8
 8006404:	f7ff fee4 	bl	80061d0 <_printf_common>
 8006408:	3001      	adds	r0, #1
 800640a:	d14a      	bne.n	80064a2 <_printf_i+0x1f6>
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	b004      	add	sp, #16
 8006412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	f043 0320 	orr.w	r3, r3, #32
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	4833      	ldr	r0, [pc, #204]	; (80064ec <_printf_i+0x240>)
 8006420:	2778      	movs	r7, #120	; 0x78
 8006422:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	6829      	ldr	r1, [r5, #0]
 800642a:	061f      	lsls	r7, r3, #24
 800642c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006430:	d402      	bmi.n	8006438 <_printf_i+0x18c>
 8006432:	065f      	lsls	r7, r3, #25
 8006434:	bf48      	it	mi
 8006436:	b2b6      	uxthmi	r6, r6
 8006438:	07df      	lsls	r7, r3, #31
 800643a:	bf48      	it	mi
 800643c:	f043 0320 	orrmi.w	r3, r3, #32
 8006440:	6029      	str	r1, [r5, #0]
 8006442:	bf48      	it	mi
 8006444:	6023      	strmi	r3, [r4, #0]
 8006446:	b91e      	cbnz	r6, 8006450 <_printf_i+0x1a4>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	f023 0320 	bic.w	r3, r3, #32
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	2310      	movs	r3, #16
 8006452:	e7a7      	b.n	80063a4 <_printf_i+0xf8>
 8006454:	4824      	ldr	r0, [pc, #144]	; (80064e8 <_printf_i+0x23c>)
 8006456:	e7e4      	b.n	8006422 <_printf_i+0x176>
 8006458:	4615      	mov	r5, r2
 800645a:	e7bd      	b.n	80063d8 <_printf_i+0x12c>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	6826      	ldr	r6, [r4, #0]
 8006460:	6961      	ldr	r1, [r4, #20]
 8006462:	1d18      	adds	r0, r3, #4
 8006464:	6028      	str	r0, [r5, #0]
 8006466:	0635      	lsls	r5, r6, #24
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	d501      	bpl.n	8006470 <_printf_i+0x1c4>
 800646c:	6019      	str	r1, [r3, #0]
 800646e:	e002      	b.n	8006476 <_printf_i+0x1ca>
 8006470:	0670      	lsls	r0, r6, #25
 8006472:	d5fb      	bpl.n	800646c <_printf_i+0x1c0>
 8006474:	8019      	strh	r1, [r3, #0]
 8006476:	2300      	movs	r3, #0
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	4615      	mov	r5, r2
 800647c:	e7bc      	b.n	80063f8 <_printf_i+0x14c>
 800647e:	682b      	ldr	r3, [r5, #0]
 8006480:	1d1a      	adds	r2, r3, #4
 8006482:	602a      	str	r2, [r5, #0]
 8006484:	681d      	ldr	r5, [r3, #0]
 8006486:	6862      	ldr	r2, [r4, #4]
 8006488:	2100      	movs	r1, #0
 800648a:	4628      	mov	r0, r5
 800648c:	f7f9 fea0 	bl	80001d0 <memchr>
 8006490:	b108      	cbz	r0, 8006496 <_printf_i+0x1ea>
 8006492:	1b40      	subs	r0, r0, r5
 8006494:	6060      	str	r0, [r4, #4]
 8006496:	6863      	ldr	r3, [r4, #4]
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	2300      	movs	r3, #0
 800649c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a0:	e7aa      	b.n	80063f8 <_printf_i+0x14c>
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	462a      	mov	r2, r5
 80064a6:	4649      	mov	r1, r9
 80064a8:	4640      	mov	r0, r8
 80064aa:	47d0      	blx	sl
 80064ac:	3001      	adds	r0, #1
 80064ae:	d0ad      	beq.n	800640c <_printf_i+0x160>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	079b      	lsls	r3, r3, #30
 80064b4:	d413      	bmi.n	80064de <_printf_i+0x232>
 80064b6:	68e0      	ldr	r0, [r4, #12]
 80064b8:	9b03      	ldr	r3, [sp, #12]
 80064ba:	4298      	cmp	r0, r3
 80064bc:	bfb8      	it	lt
 80064be:	4618      	movlt	r0, r3
 80064c0:	e7a6      	b.n	8006410 <_printf_i+0x164>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4632      	mov	r2, r6
 80064c6:	4649      	mov	r1, r9
 80064c8:	4640      	mov	r0, r8
 80064ca:	47d0      	blx	sl
 80064cc:	3001      	adds	r0, #1
 80064ce:	d09d      	beq.n	800640c <_printf_i+0x160>
 80064d0:	3501      	adds	r5, #1
 80064d2:	68e3      	ldr	r3, [r4, #12]
 80064d4:	9903      	ldr	r1, [sp, #12]
 80064d6:	1a5b      	subs	r3, r3, r1
 80064d8:	42ab      	cmp	r3, r5
 80064da:	dcf2      	bgt.n	80064c2 <_printf_i+0x216>
 80064dc:	e7eb      	b.n	80064b6 <_printf_i+0x20a>
 80064de:	2500      	movs	r5, #0
 80064e0:	f104 0619 	add.w	r6, r4, #25
 80064e4:	e7f5      	b.n	80064d2 <_printf_i+0x226>
 80064e6:	bf00      	nop
 80064e8:	08006925 	.word	0x08006925
 80064ec:	08006936 	.word	0x08006936

080064f0 <__sflush_r>:
 80064f0:	898a      	ldrh	r2, [r1, #12]
 80064f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f6:	4605      	mov	r5, r0
 80064f8:	0710      	lsls	r0, r2, #28
 80064fa:	460c      	mov	r4, r1
 80064fc:	d458      	bmi.n	80065b0 <__sflush_r+0xc0>
 80064fe:	684b      	ldr	r3, [r1, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	dc05      	bgt.n	8006510 <__sflush_r+0x20>
 8006504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	dc02      	bgt.n	8006510 <__sflush_r+0x20>
 800650a:	2000      	movs	r0, #0
 800650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006512:	2e00      	cmp	r6, #0
 8006514:	d0f9      	beq.n	800650a <__sflush_r+0x1a>
 8006516:	2300      	movs	r3, #0
 8006518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800651c:	682f      	ldr	r7, [r5, #0]
 800651e:	6a21      	ldr	r1, [r4, #32]
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	d032      	beq.n	800658a <__sflush_r+0x9a>
 8006524:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	075a      	lsls	r2, r3, #29
 800652a:	d505      	bpl.n	8006538 <__sflush_r+0x48>
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	1ac0      	subs	r0, r0, r3
 8006530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006532:	b10b      	cbz	r3, 8006538 <__sflush_r+0x48>
 8006534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006536:	1ac0      	subs	r0, r0, r3
 8006538:	2300      	movs	r3, #0
 800653a:	4602      	mov	r2, r0
 800653c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800653e:	6a21      	ldr	r1, [r4, #32]
 8006540:	4628      	mov	r0, r5
 8006542:	47b0      	blx	r6
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	d106      	bne.n	8006558 <__sflush_r+0x68>
 800654a:	6829      	ldr	r1, [r5, #0]
 800654c:	291d      	cmp	r1, #29
 800654e:	d82b      	bhi.n	80065a8 <__sflush_r+0xb8>
 8006550:	4a29      	ldr	r2, [pc, #164]	; (80065f8 <__sflush_r+0x108>)
 8006552:	410a      	asrs	r2, r1
 8006554:	07d6      	lsls	r6, r2, #31
 8006556:	d427      	bmi.n	80065a8 <__sflush_r+0xb8>
 8006558:	2200      	movs	r2, #0
 800655a:	6062      	str	r2, [r4, #4]
 800655c:	04d9      	lsls	r1, r3, #19
 800655e:	6922      	ldr	r2, [r4, #16]
 8006560:	6022      	str	r2, [r4, #0]
 8006562:	d504      	bpl.n	800656e <__sflush_r+0x7e>
 8006564:	1c42      	adds	r2, r0, #1
 8006566:	d101      	bne.n	800656c <__sflush_r+0x7c>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b903      	cbnz	r3, 800656e <__sflush_r+0x7e>
 800656c:	6560      	str	r0, [r4, #84]	; 0x54
 800656e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006570:	602f      	str	r7, [r5, #0]
 8006572:	2900      	cmp	r1, #0
 8006574:	d0c9      	beq.n	800650a <__sflush_r+0x1a>
 8006576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800657a:	4299      	cmp	r1, r3
 800657c:	d002      	beq.n	8006584 <__sflush_r+0x94>
 800657e:	4628      	mov	r0, r5
 8006580:	f7ff fbea 	bl	8005d58 <_free_r>
 8006584:	2000      	movs	r0, #0
 8006586:	6360      	str	r0, [r4, #52]	; 0x34
 8006588:	e7c0      	b.n	800650c <__sflush_r+0x1c>
 800658a:	2301      	movs	r3, #1
 800658c:	4628      	mov	r0, r5
 800658e:	47b0      	blx	r6
 8006590:	1c41      	adds	r1, r0, #1
 8006592:	d1c8      	bne.n	8006526 <__sflush_r+0x36>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0c5      	beq.n	8006526 <__sflush_r+0x36>
 800659a:	2b1d      	cmp	r3, #29
 800659c:	d001      	beq.n	80065a2 <__sflush_r+0xb2>
 800659e:	2b16      	cmp	r3, #22
 80065a0:	d101      	bne.n	80065a6 <__sflush_r+0xb6>
 80065a2:	602f      	str	r7, [r5, #0]
 80065a4:	e7b1      	b.n	800650a <__sflush_r+0x1a>
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ac:	81a3      	strh	r3, [r4, #12]
 80065ae:	e7ad      	b.n	800650c <__sflush_r+0x1c>
 80065b0:	690f      	ldr	r7, [r1, #16]
 80065b2:	2f00      	cmp	r7, #0
 80065b4:	d0a9      	beq.n	800650a <__sflush_r+0x1a>
 80065b6:	0793      	lsls	r3, r2, #30
 80065b8:	680e      	ldr	r6, [r1, #0]
 80065ba:	bf08      	it	eq
 80065bc:	694b      	ldreq	r3, [r1, #20]
 80065be:	600f      	str	r7, [r1, #0]
 80065c0:	bf18      	it	ne
 80065c2:	2300      	movne	r3, #0
 80065c4:	eba6 0807 	sub.w	r8, r6, r7
 80065c8:	608b      	str	r3, [r1, #8]
 80065ca:	f1b8 0f00 	cmp.w	r8, #0
 80065ce:	dd9c      	ble.n	800650a <__sflush_r+0x1a>
 80065d0:	6a21      	ldr	r1, [r4, #32]
 80065d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065d4:	4643      	mov	r3, r8
 80065d6:	463a      	mov	r2, r7
 80065d8:	4628      	mov	r0, r5
 80065da:	47b0      	blx	r6
 80065dc:	2800      	cmp	r0, #0
 80065de:	dc06      	bgt.n	80065ee <__sflush_r+0xfe>
 80065e0:	89a3      	ldrh	r3, [r4, #12]
 80065e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	e78e      	b.n	800650c <__sflush_r+0x1c>
 80065ee:	4407      	add	r7, r0
 80065f0:	eba8 0800 	sub.w	r8, r8, r0
 80065f4:	e7e9      	b.n	80065ca <__sflush_r+0xda>
 80065f6:	bf00      	nop
 80065f8:	dfbffffe 	.word	0xdfbffffe

080065fc <_fflush_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	690b      	ldr	r3, [r1, #16]
 8006600:	4605      	mov	r5, r0
 8006602:	460c      	mov	r4, r1
 8006604:	b913      	cbnz	r3, 800660c <_fflush_r+0x10>
 8006606:	2500      	movs	r5, #0
 8006608:	4628      	mov	r0, r5
 800660a:	bd38      	pop	{r3, r4, r5, pc}
 800660c:	b118      	cbz	r0, 8006616 <_fflush_r+0x1a>
 800660e:	6a03      	ldr	r3, [r0, #32]
 8006610:	b90b      	cbnz	r3, 8006616 <_fflush_r+0x1a>
 8006612:	f7ff fa9b 	bl	8005b4c <__sinit>
 8006616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f3      	beq.n	8006606 <_fflush_r+0xa>
 800661e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006620:	07d0      	lsls	r0, r2, #31
 8006622:	d404      	bmi.n	800662e <_fflush_r+0x32>
 8006624:	0599      	lsls	r1, r3, #22
 8006626:	d402      	bmi.n	800662e <_fflush_r+0x32>
 8006628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662a:	f7ff fb93 	bl	8005d54 <__retarget_lock_acquire_recursive>
 800662e:	4628      	mov	r0, r5
 8006630:	4621      	mov	r1, r4
 8006632:	f7ff ff5d 	bl	80064f0 <__sflush_r>
 8006636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006638:	07da      	lsls	r2, r3, #31
 800663a:	4605      	mov	r5, r0
 800663c:	d4e4      	bmi.n	8006608 <_fflush_r+0xc>
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	059b      	lsls	r3, r3, #22
 8006642:	d4e1      	bmi.n	8006608 <_fflush_r+0xc>
 8006644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006646:	f7ff fb86 	bl	8005d56 <__retarget_lock_release_recursive>
 800664a:	e7dd      	b.n	8006608 <_fflush_r+0xc>

0800664c <__swbuf_r>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	460e      	mov	r6, r1
 8006650:	4614      	mov	r4, r2
 8006652:	4605      	mov	r5, r0
 8006654:	b118      	cbz	r0, 800665e <__swbuf_r+0x12>
 8006656:	6a03      	ldr	r3, [r0, #32]
 8006658:	b90b      	cbnz	r3, 800665e <__swbuf_r+0x12>
 800665a:	f7ff fa77 	bl	8005b4c <__sinit>
 800665e:	69a3      	ldr	r3, [r4, #24]
 8006660:	60a3      	str	r3, [r4, #8]
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	071a      	lsls	r2, r3, #28
 8006666:	d525      	bpl.n	80066b4 <__swbuf_r+0x68>
 8006668:	6923      	ldr	r3, [r4, #16]
 800666a:	b31b      	cbz	r3, 80066b4 <__swbuf_r+0x68>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	6922      	ldr	r2, [r4, #16]
 8006670:	1a98      	subs	r0, r3, r2
 8006672:	6963      	ldr	r3, [r4, #20]
 8006674:	b2f6      	uxtb	r6, r6
 8006676:	4283      	cmp	r3, r0
 8006678:	4637      	mov	r7, r6
 800667a:	dc04      	bgt.n	8006686 <__swbuf_r+0x3a>
 800667c:	4621      	mov	r1, r4
 800667e:	4628      	mov	r0, r5
 8006680:	f7ff ffbc 	bl	80065fc <_fflush_r>
 8006684:	b9e0      	cbnz	r0, 80066c0 <__swbuf_r+0x74>
 8006686:	68a3      	ldr	r3, [r4, #8]
 8006688:	3b01      	subs	r3, #1
 800668a:	60a3      	str	r3, [r4, #8]
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	6022      	str	r2, [r4, #0]
 8006692:	701e      	strb	r6, [r3, #0]
 8006694:	6962      	ldr	r2, [r4, #20]
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	429a      	cmp	r2, r3
 800669a:	d004      	beq.n	80066a6 <__swbuf_r+0x5a>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	07db      	lsls	r3, r3, #31
 80066a0:	d506      	bpl.n	80066b0 <__swbuf_r+0x64>
 80066a2:	2e0a      	cmp	r6, #10
 80066a4:	d104      	bne.n	80066b0 <__swbuf_r+0x64>
 80066a6:	4621      	mov	r1, r4
 80066a8:	4628      	mov	r0, r5
 80066aa:	f7ff ffa7 	bl	80065fc <_fflush_r>
 80066ae:	b938      	cbnz	r0, 80066c0 <__swbuf_r+0x74>
 80066b0:	4638      	mov	r0, r7
 80066b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b4:	4621      	mov	r1, r4
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 f806 	bl	80066c8 <__swsetup_r>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d0d5      	beq.n	800666c <__swbuf_r+0x20>
 80066c0:	f04f 37ff 	mov.w	r7, #4294967295
 80066c4:	e7f4      	b.n	80066b0 <__swbuf_r+0x64>
	...

080066c8 <__swsetup_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4b2a      	ldr	r3, [pc, #168]	; (8006774 <__swsetup_r+0xac>)
 80066cc:	4605      	mov	r5, r0
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	460c      	mov	r4, r1
 80066d2:	b118      	cbz	r0, 80066dc <__swsetup_r+0x14>
 80066d4:	6a03      	ldr	r3, [r0, #32]
 80066d6:	b90b      	cbnz	r3, 80066dc <__swsetup_r+0x14>
 80066d8:	f7ff fa38 	bl	8005b4c <__sinit>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066e2:	0718      	lsls	r0, r3, #28
 80066e4:	d422      	bmi.n	800672c <__swsetup_r+0x64>
 80066e6:	06d9      	lsls	r1, r3, #27
 80066e8:	d407      	bmi.n	80066fa <__swsetup_r+0x32>
 80066ea:	2309      	movs	r3, #9
 80066ec:	602b      	str	r3, [r5, #0]
 80066ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066f2:	81a3      	strh	r3, [r4, #12]
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295
 80066f8:	e034      	b.n	8006764 <__swsetup_r+0x9c>
 80066fa:	0758      	lsls	r0, r3, #29
 80066fc:	d512      	bpl.n	8006724 <__swsetup_r+0x5c>
 80066fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006700:	b141      	cbz	r1, 8006714 <__swsetup_r+0x4c>
 8006702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006706:	4299      	cmp	r1, r3
 8006708:	d002      	beq.n	8006710 <__swsetup_r+0x48>
 800670a:	4628      	mov	r0, r5
 800670c:	f7ff fb24 	bl	8005d58 <_free_r>
 8006710:	2300      	movs	r3, #0
 8006712:	6363      	str	r3, [r4, #52]	; 0x34
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	2300      	movs	r3, #0
 800671e:	6063      	str	r3, [r4, #4]
 8006720:	6923      	ldr	r3, [r4, #16]
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	f043 0308 	orr.w	r3, r3, #8
 800672a:	81a3      	strh	r3, [r4, #12]
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	b94b      	cbnz	r3, 8006744 <__swsetup_r+0x7c>
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800673a:	d003      	beq.n	8006744 <__swsetup_r+0x7c>
 800673c:	4621      	mov	r1, r4
 800673e:	4628      	mov	r0, r5
 8006740:	f000 f850 	bl	80067e4 <__smakebuf_r>
 8006744:	89a0      	ldrh	r0, [r4, #12]
 8006746:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800674a:	f010 0301 	ands.w	r3, r0, #1
 800674e:	d00a      	beq.n	8006766 <__swsetup_r+0x9e>
 8006750:	2300      	movs	r3, #0
 8006752:	60a3      	str	r3, [r4, #8]
 8006754:	6963      	ldr	r3, [r4, #20]
 8006756:	425b      	negs	r3, r3
 8006758:	61a3      	str	r3, [r4, #24]
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	b943      	cbnz	r3, 8006770 <__swsetup_r+0xa8>
 800675e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006762:	d1c4      	bne.n	80066ee <__swsetup_r+0x26>
 8006764:	bd38      	pop	{r3, r4, r5, pc}
 8006766:	0781      	lsls	r1, r0, #30
 8006768:	bf58      	it	pl
 800676a:	6963      	ldrpl	r3, [r4, #20]
 800676c:	60a3      	str	r3, [r4, #8]
 800676e:	e7f4      	b.n	800675a <__swsetup_r+0x92>
 8006770:	2000      	movs	r0, #0
 8006772:	e7f7      	b.n	8006764 <__swsetup_r+0x9c>
 8006774:	20000064 	.word	0x20000064

08006778 <_sbrk_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4d06      	ldr	r5, [pc, #24]	; (8006794 <_sbrk_r+0x1c>)
 800677c:	2300      	movs	r3, #0
 800677e:	4604      	mov	r4, r0
 8006780:	4608      	mov	r0, r1
 8006782:	602b      	str	r3, [r5, #0]
 8006784:	f7fa faea 	bl	8000d5c <_sbrk>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_sbrk_r+0x1a>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b103      	cbz	r3, 8006792 <_sbrk_r+0x1a>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	20000334 	.word	0x20000334

08006798 <__swhatbuf_r>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	460c      	mov	r4, r1
 800679c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a0:	2900      	cmp	r1, #0
 80067a2:	b096      	sub	sp, #88	; 0x58
 80067a4:	4615      	mov	r5, r2
 80067a6:	461e      	mov	r6, r3
 80067a8:	da0d      	bge.n	80067c6 <__swhatbuf_r+0x2e>
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067b0:	f04f 0100 	mov.w	r1, #0
 80067b4:	bf0c      	ite	eq
 80067b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80067ba:	2340      	movne	r3, #64	; 0x40
 80067bc:	2000      	movs	r0, #0
 80067be:	6031      	str	r1, [r6, #0]
 80067c0:	602b      	str	r3, [r5, #0]
 80067c2:	b016      	add	sp, #88	; 0x58
 80067c4:	bd70      	pop	{r4, r5, r6, pc}
 80067c6:	466a      	mov	r2, sp
 80067c8:	f000 f848 	bl	800685c <_fstat_r>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	dbec      	blt.n	80067aa <__swhatbuf_r+0x12>
 80067d0:	9901      	ldr	r1, [sp, #4]
 80067d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80067d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80067da:	4259      	negs	r1, r3
 80067dc:	4159      	adcs	r1, r3
 80067de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067e2:	e7eb      	b.n	80067bc <__swhatbuf_r+0x24>

080067e4 <__smakebuf_r>:
 80067e4:	898b      	ldrh	r3, [r1, #12]
 80067e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067e8:	079d      	lsls	r5, r3, #30
 80067ea:	4606      	mov	r6, r0
 80067ec:	460c      	mov	r4, r1
 80067ee:	d507      	bpl.n	8006800 <__smakebuf_r+0x1c>
 80067f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	6123      	str	r3, [r4, #16]
 80067f8:	2301      	movs	r3, #1
 80067fa:	6163      	str	r3, [r4, #20]
 80067fc:	b002      	add	sp, #8
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
 8006800:	ab01      	add	r3, sp, #4
 8006802:	466a      	mov	r2, sp
 8006804:	f7ff ffc8 	bl	8006798 <__swhatbuf_r>
 8006808:	9900      	ldr	r1, [sp, #0]
 800680a:	4605      	mov	r5, r0
 800680c:	4630      	mov	r0, r6
 800680e:	f7ff fb0f 	bl	8005e30 <_malloc_r>
 8006812:	b948      	cbnz	r0, 8006828 <__smakebuf_r+0x44>
 8006814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006818:	059a      	lsls	r2, r3, #22
 800681a:	d4ef      	bmi.n	80067fc <__smakebuf_r+0x18>
 800681c:	f023 0303 	bic.w	r3, r3, #3
 8006820:	f043 0302 	orr.w	r3, r3, #2
 8006824:	81a3      	strh	r3, [r4, #12]
 8006826:	e7e3      	b.n	80067f0 <__smakebuf_r+0xc>
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	6020      	str	r0, [r4, #0]
 800682c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	9b00      	ldr	r3, [sp, #0]
 8006834:	6163      	str	r3, [r4, #20]
 8006836:	9b01      	ldr	r3, [sp, #4]
 8006838:	6120      	str	r0, [r4, #16]
 800683a:	b15b      	cbz	r3, 8006854 <__smakebuf_r+0x70>
 800683c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006840:	4630      	mov	r0, r6
 8006842:	f000 f81d 	bl	8006880 <_isatty_r>
 8006846:	b128      	cbz	r0, 8006854 <__smakebuf_r+0x70>
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	f023 0303 	bic.w	r3, r3, #3
 800684e:	f043 0301 	orr.w	r3, r3, #1
 8006852:	81a3      	strh	r3, [r4, #12]
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	431d      	orrs	r5, r3
 8006858:	81a5      	strh	r5, [r4, #12]
 800685a:	e7cf      	b.n	80067fc <__smakebuf_r+0x18>

0800685c <_fstat_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4d07      	ldr	r5, [pc, #28]	; (800687c <_fstat_r+0x20>)
 8006860:	2300      	movs	r3, #0
 8006862:	4604      	mov	r4, r0
 8006864:	4608      	mov	r0, r1
 8006866:	4611      	mov	r1, r2
 8006868:	602b      	str	r3, [r5, #0]
 800686a:	f7fa fa4e 	bl	8000d0a <_fstat>
 800686e:	1c43      	adds	r3, r0, #1
 8006870:	d102      	bne.n	8006878 <_fstat_r+0x1c>
 8006872:	682b      	ldr	r3, [r5, #0]
 8006874:	b103      	cbz	r3, 8006878 <_fstat_r+0x1c>
 8006876:	6023      	str	r3, [r4, #0]
 8006878:	bd38      	pop	{r3, r4, r5, pc}
 800687a:	bf00      	nop
 800687c:	20000334 	.word	0x20000334

08006880 <_isatty_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	4d06      	ldr	r5, [pc, #24]	; (800689c <_isatty_r+0x1c>)
 8006884:	2300      	movs	r3, #0
 8006886:	4604      	mov	r4, r0
 8006888:	4608      	mov	r0, r1
 800688a:	602b      	str	r3, [r5, #0]
 800688c:	f7fa fa4d 	bl	8000d2a <_isatty>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d102      	bne.n	800689a <_isatty_r+0x1a>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	b103      	cbz	r3, 800689a <_isatty_r+0x1a>
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	20000334 	.word	0x20000334

080068a0 <_init>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	bf00      	nop
 80068a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a6:	bc08      	pop	{r3}
 80068a8:	469e      	mov	lr, r3
 80068aa:	4770      	bx	lr

080068ac <_fini>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	bf00      	nop
 80068b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b2:	bc08      	pop	{r3}
 80068b4:	469e      	mov	lr, r3
 80068b6:	4770      	bx	lr
